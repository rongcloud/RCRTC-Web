/*
 * RCRTC - v5.3.2
 * CommitId - f6a1d352339c5cf1f9d56f7e73f887fe69b6198a
 * Thu Feb 24 2022 17:58:08 GMT+0800 (China Standard Time)
 * ©2020 RongCloud, Inc. All rights reserved.
 */
import { EventEmitter, LogLevel, RTCMode, IRuntime, RTCPluginContext, IServerRTCRoomEntry, IReceivedMessage, ErrorCode, IJoinRTCRoomData, KVString, RTCJoinType, IRTCUserData, IRTCJoinedInfo, IPluginGenerator } from '@rongcloud/engine';
export { RTCJoinType } from '@rongcloud/engine';

/**
 * 错误码，与移动端对齐
 * @description
 * 1. `51000 - 51999` 为 Android 专用段
 * 2. `52000 - 52999` 为 iOS 专用段
 * 3. `53000 - 53199` 为 Web RTC 专用段
 * 4. `53200 - 53499` 为 Web Call 专用段
 * 5. `53500 - 53999` 为 Web 保留段
 */
declare enum RCRTCCode {
    /** 成功 */
    SUCCESS = 10000,
    /** IM 服务未连接 */
    SIGNAL_DISCONNECTED = 50000,
    /** 参数错误 */
    PARAMS_ERROR = 50001,
    /** 加入房间错误，重复加入 RTC 房间内 */
    REPERT_JOIN_ROOM = 50002,
    /** 当前不在房间内 */
    NOT_IN_ROOM = 50003,
    /** MediaServer 未开启 */
    SERVICE_INVALID = 50004,
    /** RTC Token 无效 */
    RTC_TOKEN_INVALID = 50006,
    /** 底层信令调用错误 */
    SIGNAL_ERROR = 53001,
    /** 创建 Offer 失败 */
    CREATE_OFFER_FAILED = 53003,
    /** 网络请求失败 */
    REQUEST_FAILED = 53004,
    /** MCU 地址不可为空 */
    MCU_SERVER_NOT_FOUND = 53005,
    /** 直播订阅失败，当前存在已订阅资源 */
    BROADCAST_SUB_LIST_NOT_EMPTY = 53007,
    /** 房间已被销毁，需重新加入房间获取 Room 实例 */
    ROOM_HAS_BEEN_DESTROYED = 53008,
    /** 没有可用的音视频服务器地址 */
    NOT_OPEN_VIDEO_AUDIO_SERVER = 53009,
    /** 获取用户媒体资源流失败 */
    GET_USER_MEDIA_FAILED = 53010,
    /** 获取屏幕共享流失败 */
    GET_DISPLAY_MEDIA_FAILED = 53011,
    /** 权限问题导致获取媒体流被拒绝 */
    PERMISSION_DENIED = 53012,
    /** 创建自定义流失败 */
    CREATE_CUSTOM_TRACK_FAILED = 53013,
    /** 无效的 TAG 定义 */
    INVALID_TAGS = 53014,
    /** IM 连接无效，无法识别当前登录的用户身份 */
    INVALID_USER_ID = 53015,
    /** 创建文件流失败 */
    CREATE_FILE_TRACK_FAILED = 53016,
    /** 无效的 File 实例 */
    INVALID_FILE_INSTANCE = 53017,
    /** setRemoteDescription failed */
    SET_REMOTE_DESCRIPTION_FAILED = 53018,
    /** 浏览器不支持此方法 */
    BROWSER_NOT_SUPPORT = 53019,
    /** 媒体流无法播放，可能是远端流未订阅或本地流已销毁 */
    TRACK_NOT_READY = 53020,
    /** 视频流播放需时需传参 HTMLVideoElement 作为显示组件 */
    VIDEO_TRACK_MISS_MEDIA_ELEMENT = 53021,
    /** 媒体流播放失败 */
    TRACK_PLAY_ERROR = 53022,
    /** 观众加入直播房间信令错误 */
    SIGNAL_AUDIENCE_JOIN_ROOM_FAILED = 53023,
    /** 直播房间切换身份错误 */
    SIGNAL_ROOM_CHANGE_IDENTITY_FAILED = 53024,
    /** 公有云 SDK 包不允许使用私有云环境 */
    PACKAGE_ENVIRONMENT_ERROR = 53025,
    /** 单个用户发布资源超过限制 （ MediaServer 限制最多 10 个 track ） */
    PUBLISH_TRACK_LIMIT_EXCEEDED = 53026,
    /** 房间内无主播推 CDN */
    CDN_RESOURCE_IS_EMPTY = 53027,
    /** 加入 RTC 房间 joinTYype 为 1 时，当前有其他端在房间时的应答码 */
    SIGNAL_JOIN_RTC_ROOM_REFUSED = 53028,
    /** 设置音频输出设备时，无权限使用请求的设备 */
    NO_PERMISSION_TO_USE_REQUESTED_DEVICE = 53029,
    /** 方法在 PK 房间上不可用 */
    THE_FUNCTION_IS_DISABLED_IN_PKROOM = 53030
}

/**
 * 媒体资源类型
 */
declare enum RCMediaType {
    /**
     * 音频流
     */
    AUDIO_ONLY = 0,
    /**
     * 视频流
     */
    VIDEO_ONLY = 1,
    /**
     * 音视频混合流，只在 web 端存在混合流的情况
     */
    AUDIO_VIDEO = 2
}

/**
 * 资源大小流标识枚举
 */
declare enum RCStreamType {
    /**
     * 普通流（大流）
     */
    NORMAL = 1,
    /**
     * 小流
     */
    TINY = 2
}

declare enum RCFrameRate {
    FPS_10 = "FPS_10",
    FPS_15 = "FPS_15",
    FPS_24 = "FPS_24",
    FPS_30 = "FPS_30"
}

declare enum RCResolution {
    W176_H132 = "W176_H132",
    W176_H144 = "W176_H144",
    W256_H144 = "W256_H144",
    W320_H180 = "W320_H180",
    W240_H240 = "W240_H240",
    W320_H240 = "W320_H240",
    W480_H360 = "W480_H360",
    W640_H360 = "W640_H360",
    W480_H480 = "W480_H480",
    W640_H480 = "W640_H480",
    W720_H480 = "W720_H480",
    W1280_H720 = "W1280_H720",
    W1920_H1080 = "W1920_H1080"
}

/**
 * 流状态
 */
declare enum TrackState {
    /**
     * 不可用
     */
    DISABLE = 0,
    /**
     * 可用
     */
    ENABLE = 1
}

declare abstract class RCTrack extends EventEmitter {
    private readonly _tag;
    private readonly _userId;
    protected readonly _kind: 'audio' | 'video';
    private readonly _isLocalTrack;
    private readonly _roomId?;
    protected _localMuted: boolean;
    protected _remoteMuted: boolean;
    protected readonly _id: string;
    protected readonly _streamId: string;
    protected _msTrack?: MediaStreamTrack;
    private _msStream;
    constructor(_tag: string, _userId: string, _kind: 'audio' | 'video', _isLocalTrack: boolean, _roomId?: string | undefined);
    /**
     * 获取音视轨所属的 streamId，streamId 相同的音轨和视轨可认为属于统一道流
     * @returns
     */
    getStreamId(): string;
    getTrackId(): string;
    /**
     * 当 isMCUTrack 为 true 时，返回空字符串
     */
    getUserId(): string;
    __innerGetMediaStreamTrack(): MediaStreamTrack | undefined;
    /**
     * 获取数据标识
     * @returns
     */
    getTag(): string;
    isLocalTrack(): boolean;
    isVideoTrack(): boolean;
    isAudioTrack(): boolean;
    /**
     * 查询流数据是否已可进行播放
     * @returns
     */
    isReady(): boolean;
    __innerSetMediaStreamTrack(track: MediaStreamTrack | undefined): void;
    protected _setLocalMuted(bool: boolean): void;
    /**
     * 禁用
     */
    mute(): void;
    /**
     * 启用
     */
    unmute(): void;
    /**
     * 本端是否已禁用该轨道数据
     */
    isLocalMuted(): boolean;
    /**
     * 是否为 MCU track
     */
    isMCUTrack(): boolean;
    /**
     * 发布者是否已禁用该轨道数据，在 RCLocalTrack 实例中，则其值始终等于 `isLocalMuted()`
     */
    isOwnerMuted(): boolean;
    private _element?;
    /**
     * 播放
     * @param element 用于承载媒体流的元素标签，音频流可传空
     * @param volume 有效值为 0-100
     */
    play(element?: HTMLVideoElement, options?: {
        volume?: number;
        audioDeviceId: string;
    }): Promise<{
        code: RCRTCCode;
    }>;
    __innerDestroy(): void;
    /**
     * 释放内存中的 video、audio 标签
     */
    __releaseMediaElement(): void;
}

declare abstract class RCLocalTrack extends RCTrack {
    /**
     * 本地流结束事件通知
     * @description
     * 该事件为 MediaStreamTrack 实例的 'ended' 事件触发
     */
    static EVENT_LOCAL_TRACK_END: string;
    /**
     * muted 状态变更通知常量定义
     */
    static __INNER_EVENT_MUTED_CHANGE__: string;
    /**
     * 本地流已销毁
     */
    static __INNER_EVENT_DESTROY__: string;
    constructor(tag: string, userId: string, kind: 'audio' | 'video', track: MediaStreamTrack);
    /**
     * @override 重写 RCTrack 父类方法
     * @param bool
     */
    _setLocalMuted(bool: boolean): void;
    private _isPublished;
    __innerSetPublished(bool: boolean): void;
    /**
     * 检测本地资源是否已发布
     */
    isPublished(): boolean;
    /**
     * 销毁本地流
     */
    destroy(): void;
    private _bitrateInfo?;
    /**
     * 为本地流设定上行码率，仅视频流有效，音频默认 15 kbps，不支持修改
     * @description 当 `max` 或 `min` 值为 `0` 时，取动态码率计算结果
     * @param max 最大码率
     * @param min 最小码率
     * @param start 起始码率
     */
    setBitrate(max?: number, min?: number, start?: number): void;
    /**
     * 获取码率配置，当未指定码率时，将取得动态码率计算值
     * @returns
     */
    getBitrate(): IRCTrackBitrate;
}
declare class RCLocalAudioTrack extends RCLocalTrack {
    constructor(tag: string, userId: string, track: MediaStreamTrack);
    /**
     * 为本地流设定上行码率，仅视频流有效，音频默认 32 kbps，不支持修改
     * @param max 最大码率，`0` 表示不限制
     * @param min 最小码率，`0` 表示不限制
     * @param start 起始码率
     */
    setBitrate(max?: number, min?: number, start?: number): void;
    /**
     * 获取码率配置，当未指定码率时，将取得动态码率计算值
     * @returns
     */
    getBitrate(): IRCTrackBitrate;
}
declare class RCLocalVideoTrack extends RCLocalTrack {
    private _isTiny;
    constructor(tag: string, userId: string, track: MediaStreamTrack, _isTiny?: boolean);
    __isTiny(): boolean;
    getStreamId(): string;
    getTrackId(): string;
}
declare abstract class RCLocalFileTrack extends RCLocalTrack {
    /**
     * 自定义文件流的播放宿主原生，该类型流所持有的 MediaStreamTrack 实例是由该宿主元素 `captureStream` 获取
     */
    protected _resource: HTMLVideoElement;
    private static readonly _mapping;
    /**
     * 建立 trackId 与宿主播放元素的映射关系
     * @param trackId
     * @param video
     */
    private static __innerSetMapping;
    private static __innerRemoveMapping;
    constructor(tag: string, userId: string, kind: 'audio' | 'video', track: MediaStreamTrack, 
    /**
     * 自定义文件流的播放宿主原生，该类型流所持有的 MediaStreamTrack 实例是由该宿主元素 `captureStream` 获取
     */
    _resource: HTMLVideoElement);
    destroy(): void;
}
declare class RCLocalFileVideoTrack extends RCLocalFileTrack {
    constructor(tag: string, userId: string, track: MediaStreamTrack, element: HTMLVideoElement);
}
declare class RCLocalFileAudioTrack extends RCLocalFileTrack {
    constructor(tag: string, userId: string, track: MediaStreamTrack, element: HTMLVideoElement);
    _setLocalMuted(bool: boolean): void;
    play(): Promise<{
        code: RCRTCCode;
    }>;
}
declare class RCMicphoneAudioTrack extends RCLocalAudioTrack {
}
declare class RCCameraVideoTrack extends RCLocalVideoTrack {
}
declare class RCScreenVideoTrack extends RCLocalVideoTrack {
}

declare class RCRemoteTrack extends RCTrack {
    constructor(tag: string, userId: string, kind: 'audio' | 'video', roomId?: string);
    /**
     * 根据房间数据更新状态
     * @param value
     */
    __innerSetRemoteMuted(bool: boolean): void;
    private _isSubscribed;
    __innerSetSubscribed(bool: boolean): void;
    /**
     * 查看是否已订阅了该远端资源
     * @returns
     */
    isSubscribed(): boolean;
}
declare class RCRemoteAudioTrack extends RCRemoteTrack {
    constructor(tag: string, userId: string, roomId?: string);
}
declare class RCRemoteVideoTrack extends RCRemoteTrack {
    constructor(tag: string, userId: string, roomId?: string);
}

interface IStatParser {
    /**
     * 取消发布后，需把 _latestPacketsSent 中 key 为 resourceId 存储的数据清除掉
     */
    clearLatestpacketsSent(resourceIds: string[]): void;
    /**
     * 取消订阅后，需把 _latestPacketsRecv 中 key 为 resourceId 存储的数据清除掉
     */
    clearLatestPacketsRecv(resourceIds: string[]): void;
    parseRTCStatsReport(reports: RTCStatsReport): {
        [key: string]: any;
    };
    formatRCRTCStateReport(stats: {
        [key: string]: any;
    }): IInnerRCRTCStateReport;
    getAudioLevelList(stats: {
        [key: string]: any;
    }): {
        trackId: string;
        audioLevel: number | null;
    }[];
}

declare type ISdpSemantics = 'plan-b' | 'unified-plan';
interface IOfferInfo {
    type: 'offer';
    sdp: string;
    semantics: ISdpSemantics;
}
declare type OutboundVideoInfo = {
    trackId: string;
    simulcast: RCStreamType;
    resolution: string;
};

declare enum RCInnerCDNPullKind {
    RTMP = "rtmp",
    FLV = "flv",
    HLS = "hls"
}

declare enum RCInnerCDNPullIsHttps {
    NOT_HTTPS = 0,
    HTTPS = 1
}

declare enum RCKickReason {
    /**
     * Server 主动踢（掉 Server API 踢出）
     */
    SERVER_KICK = 1,
    /**
     * 其他设备登陆后，本端被踢
     */
    OTHER_KICK = 2
}

declare enum RCRTCPingResult {
    SUCCESS = "Success",
    FAIL = "Fail"
}

/**
 * 直播角色
 */
declare enum RCRTCLiveRole {
    /**
     * 主播
     */
    ANCHOR = 1,
    /**
     * 观众
     */
    AUDIENCE = 2
}

interface IRCTrackBitrate {
    /**
     * 最大码率
     */
    max: number;
    /**
     * 最小码率
     */
    min: number;
    /**
     * 上行起始码率
     */
    start?: number;
}
/**
 * MediaServer 返回的媒体资源数据
 */
interface IResource {
    /**
     * 媒体类型
     */
    mediaType: RCMediaType.AUDIO_ONLY | RCMediaType.VIDEO_ONLY;
    /**
     * MediaStream Id，基本为 `userId` 与 `tag` 以 `_` 拼接而来。该值无法直接作为资源的唯一性标识属性，
     * 需与 mediaType 拼接使用
     */
    msid: string;
    /**
     * MediaServer 返回的资源地址
     * @example 举例如下：
     * `{"clusterId":"rtc-data-bdcbj.ronghub.com:80","serverId":"172.28.76.215:40080","resourceId":"13111111111_5vls_web_RongCloudRTC_1","connectionId":"AAYxMDAzNjgAFDEzMTExMTExMTExXzV2bHNfd2ViAAMzMzMA","ssrc":1716229921,"serviceProvider":"bdc","userTimestamp":1604994044706}`
     */
    uri: string;
    /**
     * 资源特征，simulcast 代表这道流支持大小流
     * @description 此参数存疑，MediaServer 似乎并未下发此字段，Web 端暂不启用
     * @deprecated
     */
    features?: ['simulcast'] | [];
}
/**
 * 向房间内发布的媒体数据
 */
interface IPublishedResource extends IResource {
    /**
     * 资源禁用/启用标识，用于向 signal 同步本端资源状态，1 为启用，0 为禁用
     */
    state: 0 | 1;
    /**
     * 资源标识，同标识的资源将视作同道流，标识不可重复
     */
    tag: string;
}
interface ISubscribeAttr {
    /**
     * 要订阅的音视轨数据 Id
     */
    track: RCRemoteTrack;
    /**
     * 订阅小流，默认为 `false`
     */
    subTiny?: boolean;
}
/**
 * 视频配置
 */
interface IVideoProfile {
    /**
     * 视频帧率
     */
    frameRate: RCFrameRate;
    /**
     * 视频分辨率
     */
    resolution: RCResolution;
}
/**
 * 屏幕共享流配置
 */
interface IScreenVideoProfile extends IVideoProfile {
    /**
     * Electron 平台下通过 `desktopCapturer.getSources` 获取到的 sourceId，在 Electron 环境下为必填项。
     * @see `https://www.electronjs.org/docs/api/desktop-capturer`
     */
    chromeMediaSourceId?: string;
}
/**
 * 待发布资源数据
 */
interface IPublishAttrs {
    /**
     * 待发布的轨道数据
     */
    track: RCLocalTrack;
    /**
     * 是否同时发布小流
     */
    pubTiny?: boolean | IVideoProfile;
}
/**
 * peerConnection 抛出给用户的 track 字段
 */
interface IRCTrackStat {
    /**
     * stat id
    */
    id?: string;
    /**
     * 资源 Id
     */
    trackId: string;
    /**
     * 资源类型
     */
    kind: 'audio' | 'video';
    /**
     * 丢包率，有效值 `0` - `1`
     */
    packetsLostRate: number | null;
    /**
     * 是否是远端资源
     */
    remoteResource: boolean;
    /**
     * 音量
     */
    audioLevel?: number | null;
    /**
     * 视频高度
     */
    frameHeight?: number | null;
    /**
     * 视频宽度
     */
    frameWidth?: number | null;
    /**
     * 视频帧率
     */
    frameRate?: number | null;
    /**
     * 码率
     */
    bitrate: number;
    /**
     * 网络抖动，单位 ms
     * @description 下行数据中，同道流中只有一个 track 会有值，另一轨道数据值为 `0`
     */
    jitter: number | null;
}
/**
 * peerConnection 抛出给用户的 iceCandidatePair 字段
 */
interface IRCCandidatePairStat {
    /**
     * 本端 IP
     */
    IP: string;
    /**
     * 本地 UDP 端口
     */
    port: number;
    /**
     * 本地网络类型
     */
    networkType: string | null;
    /**
     * 远端 IP
     */
    remoteIP: string;
    /**
     * 远端 UDP 端口
     */
    remotePort: number;
    /**
     * 协议
     */
    protocol: string;
    /**
     * 发送总码率，单位 kbps
     */
    bitrateSend: number;
    /**
     * 接收总码率，单位 kbps
     */
    bitrateRecv: number;
    /**
     * （Round-Trip-Time）往返时延，单位 ms
     */
    rtt: number | null;
    /**
     * 可用上行带宽，单位 bit
     */
    availableOutgoingBitrate: number | null;
    /**
     * 可用下行带宽，在无下行资源时，其值为 `0`，单位: `bit`
     */
    availableIncomingBitrate: number | null;
}
/**
 * iceCandidatePair 所有字段
 * 含 peerConnection 抛出给用户的 iceCandidatePair 字段
 * 含 北极星上报 R3、R4 所需的 totalPacketsLost
 */
interface IInnerIcePair extends IRCCandidatePairStat {
    /**
     * 上、下行总丢包率
     */
    totalPacketsLost?: number;
}
/**
 * send track 所有字段
 * 含 peerConnection 抛出给用户的 track 字段
 * 含 北极星上报 R3 track 所需字段
 */
interface ISendTrackState extends IRCTrackStat {
    /**
     * （Round-Trip-Time）往返时延，单位 ms
     */
    rtt: number | null;
    /**
     * 编码方式
     */
    encoderImplementation: string | null;
    /**
     * PLI 请求数
     */
    pliCount: number;
    /**
     * nack 数量
     */
    nackCount: number;
    /**
     * 第一个关键帧是否正常收到
     */
    googFirsSent: number;
    /**
     * 音频采样率
     */
    samplingRate: number;
    /**
     * 接收卡顿(间隔时间, 单位: ms)
     */
    googRenderDelayMs: number;
    /**
     * 流状态(0:不可用, 1:可用)
     */
    trackState: TrackState;
}
/**
 * receive track 所有字段
 * 含 peerConnection 抛出给用户的 track 字段
 * 含 北极星上报 R4 track 所需字段
 */
interface IRecvTrackState extends IRCTrackStat {
    /**
     * 解码方式
     */
    codecImplementationName: string | null;
    samplingRate: number;
    nackCount: number;
    pliCount: number;
    rtt: number | null;
    googFirsReceived: number;
    googRenderDelayMs: number;
    trackState: TrackState;
}
/**
 * peerConnection stats 解析出来业务所需的所有字段
 */
interface IInnerRCRTCStateReport {
    timestamp: number;
    iceCandidatePair?: IInnerIcePair;
    senders: ISendTrackState[];
    receivers: IRecvTrackState[];
}
/**
 * /**
 * peerConnection stats 抛给用户的字段
 */
interface IRCRTCStateReport {
    /**
     * 报告生成时间戳
     */
    timestamp: number;
    /**
     * 对等连接状态数据
     */
    iceCandidatePair?: IRCCandidatePairStat;
    /**
     * 上行状态数据
     */
    senders: IRCTrackStat[];
    /**
     * 下行状态数据
     */
    receivers: IRCTrackStat[];
}
interface IRCRTCReportListener {
    /**
     * RTCPeerConnection 的详细状态数据
     * @param report
     */
    onStateReport?(report: IRCRTCStateReport): void;
    /**
     * ~ICE 连接状态变更通知~
     * @since version 5.1.5
     */
    onICEConnectionStateChange?(state: RTCIceConnectionState): void;
    /**
     * @deprecated
     */
    onConnectionStateChange?(state: RTCPeerConnectionState): void;
}
interface IRCRTCTrackEventListener {
    /**
     * 订阅的音视频流通道已建立, track 已可以进行播放
     * @param track RCRemoteTrack 类实例
     */
    onTrackReady?(track: RCRemoteTrack): void;
}
interface IRoomEventListener extends IRCRTCTrackEventListener {
    /**
     * 当 RTCPeerConnection 连接被异常关闭时触发，此时需业务层重新加入房间并重新发布、订阅资源。
     * 引起连接异常中断的原因包括但不限于：电脑休眠、浏览器页面长期后台运行等
     * @since 5.1.5
     */
    onRTCPeerConnectionCloseByException?(): void;
    /**
     * 当本端被剔出房间时触发
     * @description 被踢出房间可能是由于服务端超出一定时间未能收到 rtcPing 消息，所以认为己方离线。
     * 另一种可能是己方 rtcPing 失败次数超出上限
     * @param byServer 当值为 `false` 时，说明本端 rtcPing 超时；当值为 `true` 时，说明本端收到被踢出房间通知
     */
    onKickOff?(byServer: boolean, state?: RCKickReason): void;
    /**
     * 接收到房间信令时回调，用户可通过房间实例的 sendMessage 接口发送信令
     * @param name 信令名
     * @param content 信令内容
     * @param senderUserId 发送者 Id
     * @param messageUId 消息唯一标识
     */
    onMessageReceive?(name: string, content: any, senderUserId: string, messageUId: string): void;
    /**
     * 房间属性变更回调
     * @param name
     * @param content
     */
    onRoomAttributeChange?(name: string, content?: string): void;
    /**
     * 房间用户禁用/启用音频
     * @param audioTrack RCRemoteAudioTrack 类实例
     */
    onAudioMuteChange?(audioTrack: RCRemoteAudioTrack): void;
    /**
     * 房间用户禁用/启用视频
     * @param videoTrack RCRemoteVideoTrack 类实例对象
     */
    onVideoMuteChange?(videoTrack: RCRemoteVideoTrack): void;
    /**
     * 房间内用户发布资源
     * @param tracks 新发布的音轨与视轨数据列表，包含新发布的 RCRemoteAudioTrack 与 RCRemoteVideoTrack 实例
     */
    onTrackPublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 房间用户取消发布资源
     * @param tracks 被取消发布的音轨与视轨数据列表
     * @description 当资源被取消发布时，SDK 内部会取消对相关资源的订阅，业务层仅需处理 UI 业务
     */
    onTrackUnpublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 人员加入
     * @param userIds 加入的人员 id 列表
     */
    onUserJoin?(userIds: string[]): void;
    /**
     * 人员退出
     * @param userIds
     */
    onUserLeave?(userIds: string[]): void;
    /**
     * 主播开启、停止推 CDN 状态通知
     */
    onCDNEnableChange?(enable: boolean): void;
    /**
     * RTC 每次 Ping 的结果
     * @since version: 5.1.5
     */
    onPing?(result: RCRTCPingResult): void;
    /**
     * 主播和观众切换身份通知
     */
    onSwitchRole?(userId: string, role: RCRTCLiveRole): void;
}
/**
 * RTCClient 初始化配置
 * @public
 */
interface IRCRTCInitOptions {
    /**
     * 自定义 MediaServer Url，公有云用户无需关注
     * @description
     * 1. 仅当 `location.hostname` 为 `localhost` 时，`http` 协议地址有效，否则必须使用 `https` 协议地址
     * 2. 当该值有效时，将不再从 IMLib 导航数据中获取 mediaServer 地址
     */
    mediaServer?: string;
    /**
     * 输出日志等级，生产环境默认使用 WARN，开发环境默认为 DEBUG
     * @description
     * * 0 - DEBUG
     * * 1 - INFO
     * * 2 - WARN
     * * 3 - ERROR
     */
    logLevel?: LogLevel;
    /**
     * 修改默认的 log 输出函数
     */
    logStdout?: (logLevel: LogLevel, content: string) => void;
    /**
     * 与 MediaServer 的 http 请求超时时间，单位为毫秒，默认值为 `5000`，有效值 `5000-30000`。
     * 优先级：用户配置 > 导航配置 > 默认时间。
     */
    timeout?: number;
    /**
     * 房间 Ping 间隔时长，默认 `10000` ms，有效值 `3000`-`10000`
     */
    pingGap?: number;
    /**
     * 优化使用的 SDP 协议版本，仅当运行时浏览器支持相应 SDP 协议版本时生效
     */
    sdpSemantics?: ISdpSemantics;
    /**
     * 观众拉内置 CDN 资源的直播拉流协议，默认为 RCInnerCDNPullKind.FLV
     */
    pullInnerCDNProtocol?: RCInnerCDNPullKind;
    /**
     * 观众拉内置 CDN 资源时是否使用 https，默认为 RCInnerCDNPullIsHttps.HTTPS
     */
    pullInnerCDNUseHttps?: RCInnerCDNPullIsHttps;
}
interface ICameraVideoProfile extends IVideoProfile {
    cameraId?: string;
    faceMode?: 'user' | 'environment';
}
interface IMicphoneAudioProfile {
    micphoneId?: string;
    sampleRate?: number;
}
interface ICreateLocalTrackOptions {
    /**
     * 剔除音轨
     */
    withoutAudio?: boolean;
    /**
     * 剔除视轨
     */
    withoutVideo?: boolean;
}
/**
 * 音量上报事件接口
 */
interface IAudioLevelChangeHandler {
    (audioLevelReportList: {
        track: RCLocalAudioTrack | RCRemoteAudioTrack;
        audioLevel: number;
    }[]): void;
}
/**
 * 房间资源数据
 */
declare type RoomData = {
    [userId: string]: IPublishedResource[];
};
/**
 * pkInfo 接口
 */
interface IPKInfo {
    [roomId: string]: {
        inviteSessionId: string;
        inviterRoomId: string;
        inviterUserId: string;
        inviterUserAutoMix?: boolean;
        inviteeRoomId: string;
        inviteeUserAutoMix?: boolean;
    };
}
/**
 * 业务层发起连麦、响应连麦可选参数定义
 */
interface IReqResPKOptions {
    autoMix?: boolean;
    extra?: string;
}
interface IPKInviterBaseInfo {
    /**
     * 邀请者房间 ID
     */
    inviterRoomId: string;
    /**
     * 邀请者用户 ID
     */
    inviterUserId: string;
}
interface IPKInviteeBaseInfo {
    /**
     * 被邀请者房间 ID
     */
    inviteeRoomId: string;
    /**
     * 被邀请者用户 ID
     */
    inviteeUserId: string;
}
/**
 * 业务层监听收到连麦邀请、取消连麦的字段
 */
interface IPKInviteInfo extends IPKInviterBaseInfo {
    /**
     * 邀请额外信息
     */
    extra?: string;
}
/**
 * 业务层监听收到连麦应答的字段
 */
interface IPKInviteAnswerInfo extends IPKInviterBaseInfo, IPKInviteeBaseInfo {
    /**
     * 是否同意邀请
     */
    agree: boolean;
    /**
     * 响应额外信息
     */
    extra?: string;
}
/**
 * 业务层监听收到连麦结束的字段
 */
interface IPKEndInfo {
    /**
     * 发起结束的房间 ID
     */
    endRoomId: string;
    /**
     * 发起结束的用户 ID
     */
    endUserId: string;
}
/**
 * 观众加房间返回给客户的 CDN 信息
 */
interface IJoinResCDNInfo {
    resolution?: RCResolution;
    fps?: RCFrameRate;
    CDNEnable?: boolean;
}

declare enum RCInnerCDNPushMode {
    AUTOMATIC = 0,
    MANUAL = 1
}

declare enum RCInnerCDNBroadcast {
    SPREAD = 0,
    NO_SPREAD = -1
}

/**
 * 与 MediaServer 交互所需的 Request Header 信息
 */
interface IRTCReqHeader {
    /**
     * RTC Token
     * @todo 有效期问题处理
     */
    Token: string;
    /**
     * 房间 Id
     */
    RoomId: string;
    /**
     * 用户 Id
     */
    UserId: string;
    /**
     * 仅在直播模式下需要
     */
    RoomType?: RTCMode;
    /**
     * 开发者的 AppKey
     */
    'App-Key': string;
    /**
     * signal 会话 session id
     */
    'Session-Id'?: string;
}
interface IMCUReqHeaders {
    'App-Key': string;
    Token: string;
    RoomId: string;
    UserId: string;
    SessionId: string;
}
/**
 * exchange 接口的请求体结构
 */
interface IExchangeReqBody {
    /**
     * local description
     */
    sdp: IOfferInfo;
    /**
     * 订阅列表
     */
    subscribeList: {
        /**
         * 流资源 uri
         */
        uri: string;
        /**
         * 大小流订阅，`1` 为大流，`2` 为小流，默认使用大流
         */
        simulcast: RCStreamType;
        /**
         * 分辨率信息
         */
        resolution: string;
    }[];
    /**
     * 透传参数，一般用于传递参数给其他服务，如 MCU/Record 等，MediaServer 仅透传不处理
     * @example `{"resolutionInfo":[{"trackId":"021ad6e8-a50c-479c-96c8-5f3f09d2352d","simulcast":1,"resolution":"640x480"}]}`
     */
    extend: string;
    /**
     * 跨房间连麦时其他房间的推流信息
     */
    pushOtherRooms?: {
        /**
         * 房间 Id
         */
        roomId: string;
        /**
         * 是否默认合流
         */
        autoMix: boolean;
        /**
         * 房间 Id 对应的 SessionId
         */
        sessionId: string;
    }[];
    /**
     * server 根据网络动态切换大小流开关，默认为 `false`
     */
    switchstream: boolean;
}
interface ILiveUrls {
    /**
     * MCU 服务地址，直播模式中用于向 MCU 服务提交 CDN 及合流配置
     */
    configUrl: string;
    /**
     * 观众端订阅地址，由业务层分发
     */
    liveUrl: string;
    /**
     * 自动推 CDN 模式下，发布资源后返回的 CDN 信息
     */
    pull_url?: string;
}
interface IRTCResponse {
    /**
     * 请求响应码，只有在 resultCode 值为 `10000` 时才为正常响应
     */
    resultCode: RCRTCCode;
    /**
   * 与 resultCode 相应的可读性文字信息
   */
    message: string;
    /**
     * 客户端发送的 Request-Id
     */
    'Request-Id': string;
}
/**
 * /exchange 响应结果
 */
interface IExchangeResponse extends IRTCResponse {
    /**
     * 数据中心地址，当存在此值时，后续所有请求发送到该地址。该地址不携带协议头，故需要补全 `https://` 协议头
     */
    clusterId: string;
    /**
     * 发布的资源列表
     */
    publishList: IResource[];
    /**
     * @deprecated 目前并未使用，服务器返回值为 ''
     */
    roomId: '';
    /**
     * 远端 SDP 数据
     */
    sdp: {
        type: 'answer';
        sdp: string;
    };
    /**
     * 直播模式推流数据，仅在直播模式有值
     */
    urls?: ILiveUrls;
    /**
     * 跨房间连麦响应数据
     */
    otherRoomsRes?: {
        [roomId: string]: ILiveUrls;
    };
    /**
     * 直播 mcu 资源
     * 主播发布为具体资源，会议模式为空数组
     */
    mcuPublishList?: IResource[];
    /**
     * 订阅成功的资源
     */
    subscribedList?: {
        mediaType: RCMediaType.AUDIO_ONLY | RCMediaType.VIDEO_ONLY;
        msid: string;
        userId: string;
        simulcast?: RCStreamType;
    }[];
}
interface IBroadcastSubReqBody {
    /**
     * 客户端 offer
     */
    sdp: {
        type: 'offer';
        sdp: string;
    };
    /**
     * 直播信息
     */
    liveUrl?: string;
    /**
     * 订阅的资源类型，默认为 `RCMediaType.AUDIO_VIDEO`
     */
    mediaType?: RCMediaType;
    /**
     * 订阅大/小流，默认订阅大流
     */
    simulcast?: RCStreamType;
    /**
     * 允许 server 根据网络状况动态切换大小流，默认为 false
     */
    switchstream: boolean;
    /**
     * 订阅列表
     */
    subscribeList?: {
        /**
         * 流资源 uri
         */
        uri: string;
        /**
         * 大小流订阅，`1` 为大流，`2` 为小流，默认使用大流
         */
        simulcast: RCStreamType;
        /**
         * 分辨率信息
         */
        resolution: string;
    }[];
    /**
     * 是否采用新版本模式，加入房间
     */
    newVersionFlag?: boolean;
}
interface IBroadcastSubRespBody extends IRTCResponse {
    /**
     * 已订阅的资源列表
     */
    subscribedList: IResource[];
    /**
     * 远端 SDP
     */
    sdp: {
        type: 'answer';
        sdp: string;
    };
}
/**
 * 获取 CDN 资源拉流地址请求 headers
 */
interface ICDNPlayUrlReqHeaders extends IMCUReqHeaders {
}
/**
 * 获取 CDN 资源拉流地址响应
 */
interface ICDNPlayUrlResponse extends IRTCResponse {
    data: {
        fps: number;
        h: number;
        'pull_url': string;
        w: number;
    };
}
/**
 * cdn_uris 里面包含的字段
 */
interface ICDNUris {
    /**
     * 是否扩散
     */
    broadcast: RCInnerCDNBroadcast;
    /**
     * 拉流资源的宽度
     */
    w?: number;
    /**
     * 拉流资源的高度
     */
    h?: number;
    /**
    * 帧率
    */
    fps?: number;
    /**
     * 获取拉流地址的 url
     */
    url: string;
    /**
     * 开启、停用 CDN
     */
    enableInnerCDN?: boolean;
    /**
     * 推送模式，手动 or 自动
     */
    'push_mode': RCInnerCDNPushMode;
    'pull_safe': boolean;
}

/**
 * 直播布局模式定义
 */
declare enum MixLayoutMode {
    /**
     * 自定义布局
     */
    CUSTOMIZE = 1,
    /**
     * 悬浮布局（默认）
     */
    SUSPENSION = 2,
    /**
     * 自适应布局
     */
    ADAPTATION = 3
}

/**
 * 合流布局对视频的填充模式
 */
declare enum MixVideoRenderMode {
    /**
     * 裁剪（默认）
     */
    CROP = 1,
    /**
     * 不裁剪
     */
    WHOLE = 2
}

declare enum RCInnerCDNModel {
    OPEN = 1,
    STOP = 2
}

/**
 * 合流后的 video 输出编码配置，包含分辨率、帧率、码率配置项
 */
interface IMCUOutputVideoAttrs {
    /**
     * 视频分辨率宽度
     */
    width?: number;
    /**
     * 视频分辨率高度
     */
    height?: number;
    /**
     * 帧率
     */
    fps?: number;
    /**
     * 码率
     */
    bitrate?: number;
}
/**
 * 自定义布局中的单一视频流布局
 */
interface IMCUInputVideoLayout {
    user_id: string;
    stream_id: string;
    x: number;
    y: number;
    width: number;
    height: number;
}
/**
 * 图片配置，用于水印、视频流背景图
 */
interface IPictureAttrs {
    /**
     * 资源下载地址，需包含协议
     */
    uri: string;
    /**
     * 相对于整体画布的起始位置 x 坐标
     */
    x: number;
    /**
     * 相对于整体画布的起始位置 y 坐标
     */
    y: number;
    /**
     * 相对于整体画布的宽（百分比），有效值 `0.0` - `1.0`
     */
    w: number;
    /**
     * 相对于整体画布的高（百分比），有效值 `0.0` - `1.0`
     */
    h: number;
}
/**
 * 合流后的 Video 输出配置，包含背景图、背景色、大小流编码等配置项
 */
interface IMCUOutputVideoConfig {
    /**
     * 标准流输出定义
     */
    normal?: IMCUOutputVideoAttrs;
    /**
     * 小流输出定义
     */
    tiny?: IMCUOutputVideoAttrs;
    exparams?: {
        /**
         * 合流布局时，对视频流的填充方式
         */
        renderMode: MixVideoRenderMode;
    };
    /**
     * 背景色，如 `'0xf1a2c3'`
     */
    backgroundColor?: string;
    /**
     * 背景图
     */
    backgroundPicture?: {
        /**
         * 填充模式：
         * 1. 按比例裁剪
         * 2. 不裁剪，按比例压缩
         */
        fillMode: 1 | 2;
        /**
         * 资源列表
         */
        picture: IPictureAttrs[];
    };
}
/**
 * 合流后的媒体输出定义
 */
interface IMCUOutputConfig {
    /**
     * 输出视频配置
     */
    video: IMCUOutputVideoConfig;
    /**
     * 输出音频配置
     */
    audio?: {
        /**
         * 音频码率
         */
        bitrate: number;
    };
    /**
     * CDN 推流地址列表
     */
    cdn?: {
        /**
         * 推流地址，如：`'rtmp://xxxx'`
         */
        pushurl: string;
    }[];
}
/**
 * 时间戳参数，用于水印
 */
interface ITimestampAttrs {
    /**
     * 时区
     */
    timezone: number;
    /**
     * 字体像素大小
     */
    fontSize: number;
    /**
     * 字体颜色
     */
    color: 'black' | 'white';
    /**
     * 透明度，有效值 `0.0` 至 `1.0`
     */
    alpha: number;
    /**
     * 相较于整体画布的 x 坐标（百分比），有效值 `0.0` 至 `1.0`
     */
    x: number;
    /**
     * 相较于整体画布的 y 坐标（百分比），有效值 `0.0` 至 `1.0`
     */
    y: number;
}
/**
 * 文本参数，用于水印
 */
interface ITextAttrs {
    /**
     * 文字内容
     */
    content: string;
    /**
     * 文字像素
     */
    fontSize: number;
    /**
     * 文字颜色
     */
    color: 'black' | 'white';
    /**
     * 透明度，有效值 `0.0` 至 `1.0`
     */
    alpha: number;
    /**
     * 相较于整体画布的 x 坐标（百分比），有效值 `0.0` 至 `1.0`
     */
    x: number;
    /**
     * 相较于整体画布的 y 坐标（百分比），有效值 `0.0` 至 `1.0`
     */
    y: number;
}
/**
 * 屏幕水印配置
 */
interface IWaterMarkConfig {
    /**
     * 时间戳水印配置
     */
    timestamp?: ITimestampAttrs;
    /**
     * 图片水印配置
     */
    picture?: IPictureAttrs[];
    /**
     * 文字水印配置
     */
    text: ITextAttrs[];
}
/**
 * 合流前的单一视频流水印配置
 */
interface IMCUSignalScreenWaterMarkConfig extends IWaterMarkConfig {
    /**
     * 媒体流的 msid
     */
    streamId: string;
}
interface IMCUWaterMarkConfig {
    /**
     * 合流后的屏幕水印配置
     */
    mixScreen: IWaterMarkConfig;
    /**
     * 合流前的单人视频流水印配置
     */
    signalScreen: IMCUSignalScreenWaterMarkConfig[];
}
/**
 * 发布到服务器的 MCU 配置数据
 */
interface IMCUConfig {
    /**
     * 为向后兼容，当前为常量 1
     */
    version: 1;
    /**
     * 布局模式，在只配置推流 CDN 时，该值不存在
     */
    mode: MixLayoutMode;
    /**
     * 渲染到主位置上的流 Id，当该值为空时，输出到主位置的流按发布时间顺序优先选择最早发布的流
     */
    host_stream_id?: string;
    /**
     * 自定义布局输入定义，只有在 mode 值为 `MixLayoutMode.CUSTOMIZE` 时需传值
     */
    input?: {
        video: IMCUInputVideoLayout[];
    };
    /**
     * 合流后的媒体输出配置
     */
    output?: IMCUOutputConfig;
    /**
     * 水印配置
     */
    waterMark?: IMCUWaterMarkConfig;
}
/**
 * 设置开启、停用内置 CDN 数据
 */
interface ISetEnableCDN {
    version: 2;
    output: {
        /**
         * 手动开启/停用内置 CDN
         */
        inCDNModel: RCInnerCDNModel;
    };
}

declare class RCMediaService {
    private readonly _runtime;
    private readonly _context;
    /**
     * 自定义 MediaServer 地址，当有值时，不再使用导航内的地址
     */
    private readonly _msUrl?;
    /**
     * 请求超时时长
     */
    private readonly _timeout;
    /**
     * navi 中获取的媒体服务地址
     */
    private readonly _msInNavi;
    /**
     * 已失败的请求地址
     */
    private readonly _failedMs;
    /**
     * 服务器指纹数据，客户端不得修改，直接透传
     */
    private _rtcFinger;
    /**
     * 服务器接口返回的 clusterId 数据，当此数据有值时，后续所有请求向此服务发送
     */
    private _clusterId;
    /**
     * MCU 服务地址
     */
    private _configUrl;
    constructor(_runtime: IRuntime, _context: RTCPluginContext, 
    /**
     * 自定义 MediaServer 地址，当有值时，不再使用导航内的地址
     */
    _msUrl?: string | undefined, 
    /**
     * 请求超时时长
     */
    _timeout?: number);
    getNaviMS(): string[];
    /**
     * 发送请求，请求发送若失败，会继续尝试使用后续可用地址直到无地址可用，此时认为请求失败
     * @param path
     * @param header
     * @param body
     */
    private _request;
    /**
     * 资源协商接口，订阅、发布、变更资源均可以使用此接口。该接口通过 sdp 字段交换 SDP 信息，
     * 并通过 subscribeList 和 publishList 表明最终发布和订阅的资源。本端产出 offer，服务器产出 answer
     * 每次接口调用，都会全量覆盖发布和订阅的资源。
     * @param header
     * @param body
     */
    exchange(headers: IRTCReqHeader, body: IExchangeReqBody): Promise<{
        code: RCRTCCode;
        data?: IExchangeResponse | undefined;
    }>;
    /**
     * 退出房间
     */
    exit(headers: IRTCReqHeader): Promise<RCRTCCode>;
    /**
     * 观众端订阅主播资源
     */
    broadcastSubscribe(headers: IRTCReqHeader, body: IBroadcastSubReqBody): Promise<{
        code: RCRTCCode;
        data?: IBroadcastSubRespBody | undefined;
    }>;
    /**
     * 观众端退出订阅
     */
    broadcastExit(headers: IRTCReqHeader): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 直播推流、自定义布局配置
     */
    setMcuConfig(headers: IMCUReqHeaders, body: IMCUConfig | ISetEnableCDN): Promise<{
        code: RCRTCCode;
        res?: any;
    }>;
    /**
     * 房间内观众获取 CDN 资源信息、拉流地址
     */
    getCDNResourceInfo(headers: ICDNPlayUrlReqHeaders, url: string): Promise<{
        code: RCRTCCode;
        res?: ICDNPlayUrlResponse;
    }>;
}

declare class RCLocalMediaStream {
    readonly msid: string;
    readonly mediaStream: MediaStream;
    readonly tinyStream: MediaStream;
    readonly tag: string;
    constructor(msid: string);
}

/**
 * 直播间类型
 */
declare enum RCLivingType {
    /**
     * 音视频直播
     */
    VIDEO = 0,
    /**
     * 音频直播
     */
    AUDIO = 1
}

interface IAudienceRoomEventListener extends IRCRTCTrackEventListener {
    /**
     * 主播加入
     * @param userIds 加入主播的 id 列表
     */
    onAnchorJoin?(userId: string[]): void;
    /**
     * 主播退出
     * @param userIds 退出主播的 id 列表
     */
    onAnchorLeave?(userId: string[]): void;
    /**
     * 房间内合流发布资源
     * @param tracks 新发布的合流音轨与视轨数据列表，包含新发布的 RCRemoteAudioTrack 与 RCRemoteVideoTrack 实例
     * @description
     * 当房间内某个主播第一次发布资源时触发
     */
    onTrackPublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 房间内取消合流发布资源
     * @param tracks 被取消发布的合流音轨与视轨数据列表
     * @description
     * 当房间内全部主播退出房间时，SDK 内部会取消对资源的订阅，业务层仅需处理 UI 业务
     */
    onTrackUnpublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 房间内主播发布资源
     * @param tracks 主播新发布的音轨与视轨数据列表，包含新发布的 RCRemoteAudioTrack 与 RCRemoteVideoTrack 实例
     */
    onAnchorTrackPublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 房间内主播取消发布资源
     * @param tracks 被主播取消发布的音轨与视轨数据列表
     * @description 当资源被取消发布时，SDK 内部会取消对相关资源的订阅，业务层仅需处理 UI 业务
     */
    onAnchorTrackUnpublish?(tracks: RCRemoteTrack[]): void;
    /**
     * 房间主播禁用/启用音频
     * @param audioTrack RCRemoteAudioTrack 类实例
     */
    onAudioMuteChange?(audioTrack: RCRemoteAudioTrack): void;
    /**
    * 房间主播禁用/启用视频
    * @param videoTrack RCRemoteVideoTrack 类实例对象
    */
    onVideoMuteChange?(videoTrack: RCRemoteVideoTrack): void;
    /**
     * 房间内主播把发布的资源推至 CDN
     */
    onCDNInfoEnable?(CDNInfo: {
        resolution: RCResolution;
        fps: RCFrameRate;
    }): void;
    /**
     * 主播停止推 CDN
     */
    onCDNInfoDisable?(): void;
    /**
     * 主播改变推 CDN 的分辨率或帧率
     */
    onCDNInfoChange?(CDNInfo: {
        resolution: RCResolution;
        fps: RCFrameRate;
    }): void;
}
/**
 * 观众直播房间类
 * 处理：
 * 1、通知观众房间内 人员变更、资源变更
 * 2、观众订阅、取消订阅资源
 */
declare class RCAudienceLivingRoom {
    private readonly _context;
    private readonly _runtime;
    private readonly _initOptions;
    readonly _roomId: string;
    private readonly _joinResData;
    readonly _livingType: RCLivingType;
    private readonly _service;
    /**
     * 主播列表
     */
    private _roomAnchorList;
    /**
     * 合流、分流资源
     */
    private _roomRes;
    /**
     * 主播分流资源
     */
    private _roomAnchorRes;
    /**
     * 合流、分流 remoteTracks
     */
    private _remoteTracks;
    private _appListener;
    private _pc;
    private _subscribedList;
    private _sessionId;
    private _destroyed;
    /**
     * 北极星上报实例
     */
    protected _polarisReport: PolarisReporter | null;
    /**
     * 音量上报实例
     */
    private _audioLevelReport;
    /**
     * cdn_uris 资源
     */
    private _CDNUris;
    constructor(_context: RTCPluginContext, _runtime: IRuntime, _initOptions: IRCRTCInitOptions, _roomId: string, _joinResData: {
        token: string;
        kvEntries: IServerRTCRoomEntry[];
    }, _livingType: RCLivingType);
    /**
     * 解析服务端返回的 KV 数据，赋值 room 内数据
     */
    private _setInitData;
    protected _assertRoomDestroyed(): RCRTCCode | undefined;
    /**
     * @description 信令数据处理
     * @param roomId 数据对应的房间 Id
     * @param singalData 拉取到的数据
     * * key RC_ANCHOR_LIST value: 为主播 ID 集合
     * * key RC_RES_`userId` value: 为主播发布的资源
     * * key RC_RTC_SESSIONID value: sessionId
     * * key RC_CDN value: CDN 资源数据
     */
    private singalDataChange;
    /**
     * 计算加入离开的主播 ID 列表
     */
    private _diffAnchorList;
    private _handleNewJoinedAnchor;
    private _handleLeftedAnchor;
    /**
     * 计算新发布和取消发布的合流资源
     */
    private _diffRoomResource;
    /**
     * 计算主播发布和取消发布的资源，以及资源的状态变更
    */
    private _diffAnchorResource;
    private _onUserUnpublish;
    private _callAppListener;
    /**
     * ice 断线后，尝试重新走 exchange
    */
    private _reTryExchange;
    /**
     * 获取 subscribe 接口的请求体数据
     * @param subscribeList 订阅清单
     * @param publishedStreams 已发布流
     * @param iceRestart
     */
    protected _createSubscribeParams(subscribeList: ISubscribeAttr[], publishedStreams: {
        [msid: string]: RCLocalMediaStream;
    }, iceRestart: boolean): Promise<{
        reqBody: IBroadcastSubReqBody;
        offer: RTCSessionDescriptionInit;
        dynamicBitrate: {
            min: number;
            max: number;
        };
    }>;
    private _subscribeHandle;
    private _getReqHeaders;
    private _exchangeHandle;
    private _updateSubListHandle;
    /**
     * 对比 cdn_uris 资源
     * @param newCDNUris 新的 cdn_uris 数据
     */
    private _diffCDNUris;
    /**
     * 获取 CDN 资源对应的拉流地址
     * _CDNUris 无 url 时，说明未开启 CDN 推送
     * @returns CDNPlayUrl
     */
    private _getCDNPlayUrl;
    /**
     * 获取 CDN 资源对应的拉流地址
     * @returns CDNPlayUrl
     */
    getCDNPlayUrl(resolution?: RCResolution, fps?: RCFrameRate): Promise<{
        code: RCRTCCode;
        CDNPlayUrl?: string;
    }>;
    /**
     * 订阅资源
     * @param tracks
     */
    subscribe(tracks: (RCRemoteTrack | ISubscribeAttr)[]): Promise<{
        code: RCRTCCode;
        failedList?: ISubscribeAttr[];
    }>;
    private __unsubscribe;
    /**
     * 取消订阅资源
     * @param tracks
     */
    unsubscribe(tracks: RCRemoteTrack[]): Promise<{
        code: RCRTCCode;
        failedList?: ISubscribeAttr[];
    }>;
    /**
     * 退出房间并销毁当前房间实例，退出后该房间的所有方法将不可用
     */
    __destroy(quitRoom: boolean): Promise<void>;
    /**
     * 根据 trackId 获取房间内的远端资源
     * @param trackId
     */
    getRemoteTrack(trackId: string): RCRemoteTrack;
    /**
     * 获取 _pc 实例
     */
    __getPC(): RCRTCPeerConnection;
    /**
     * TODO 待优化
     * @param trackId
     */
    getLocalTrack(trackId: string): RCRemoteTrack;
    /**
     * 断线重连后处理逻辑, SDK 内部处理调用
     */
    __onReconnected(): Promise<void>;
    /**
     * 观众房间事件注册
     * @param tag 参数描述
     */
    registerRoomEventListener(listener: IAudienceRoomEventListener | null): void;
    /**
     * 音量上报
     * @param handler 业务端传入的音量上报事件
     * @param gap 上报时间间隔
     */
    onAudioLevelChange(handler: IAudioLevelChangeHandler | null, gap?: number): void;
    /**
     * 注册房间数据监控
     * @param listener
     */
    registerReportListener(listener: IRCRTCReportListener | null): void;
    /**
     * 获取房间 Id
     */
    getRoomId(): string;
    /**
     * 获取当前 userId
     */
    getCrtUserId(): string;
    /**
     * 获取房间当前会话 Id，当房间内已无成员时房间会回收，重新加入时 sessionId 将更新
     */
    getSessionId(): string;
    /**
     * 获取远程主播用户列表
     */
    getRemoteUserIds(): string[];
    /**
     * 获取远端用户的资源列表
     * @param userId
     * @returns
     */
    getRemoteTracksByUserId(userId: string): RCRemoteTrack[];
    /**
     * 获取房间内所有已发布的远端资源列表, 包含合流资源
     * @returns
     */
    getRemoteTracks(): RCRemoteTrack[];
    /**
     * 获取远端 RTC tracks
     */
    getRemoteRTCTracks(): RCRemoteTrack[];
    /**
     * 获取远端 MCU tracks
     */
    getRemoteMCUTracks(): RCRemoteTrack[];
    /**
     * 获取房间内 CDN 信息
     */
    getCDNInfo(): {
        resolution: RCResolution;
        fps: RCFrameRate;
        CDNEnable: boolean | undefined;
    } | {
        CDNEnable: boolean;
        resolution?: undefined;
        fps?: undefined;
    };
}

/**
 * 北极星上报角色
 */
declare enum PolarisRole {
    /**
     * 会议参会者、主播
     */
    MeetingOrAnchor = 1,
    /**
     * 观众
     */
    Audience = 2
}

declare class PolarisReporter {
    private readonly _context;
    private readonly _runtime;
    private readonly _roomId;
    private readonly _crtRTCRoom;
    private readonly _userRole;
    constructor(_context: RTCPluginContext, _runtime: IRuntime, _roomId: string, _crtRTCRoom: RCAbstractRoom | RCAudienceLivingRoom, _userRole?: PolarisRole);
    private _send;
    private _getClientID;
    /**
     * 小流需去掉 _tiny，小流 resourceId 为 userId_tag_mediaType_tiny
     */
    private _getRealResourceId;
    /**
     * 生成北极星上报的 trackId
     * @param resourceId userId_11_1_tiny 改为 userId_11_tiny_video
     */
    private _getPolarisTrackId;
    sendR3R4Data(data: IInnerRCRTCStateReport): void;
    /**
     * 加入房间
     */
    sendR1(): void;
    /**
     * RTC 和 LIVE 发布、取消发布
     * RTC 订阅、取消订阅
     */
    sendR2(action: string, status: string, trackIds: string[]): void;
}

/**
 * PC 实例管理类
 */
declare class RCRTCPeerConnection extends EventEmitter {
    /**
     * _reTryExchange 方法
     */
    private readonly _reTryExchange;
    /**
     * 北极星上传实例
     */
    private readonly _polarisReport?;
    static __INNER_EVENT_TRACK_READY__: string;
    private readonly _rtcPeerConn;
    private readonly _sdpStrategy;
    reportParser: IStatParser | null;
    private pubLocalTracks;
    private _reTryExchangeTimer;
    private _reportStatsTimer;
    constructor(
    /**
     * _reTryExchange 方法
     */
    _reTryExchange: Function, 
    /**
     * 北极星上传实例
     */
    _polarisReport?: PolarisReporter | undefined);
    getLocalTracks(): RCLocalTrack[];
    private _onConnectionStateChange;
    private _onICEConnectionStateChange;
    private _onTrackReady;
    setBitrate(max: number, min: number, start?: number): Promise<void>;
    createOffer(iceRestart: boolean): Promise<IOfferInfo>;
    setRemoteAnswer(answer: string): Promise<RCRTCCode>;
    getLocalTrack(trackId: string): RCLocalTrack | null;
    addLocalTrack(track: RCLocalTrack): void;
    removeLocalTrackById(trackId: string): void;
    removeAllLocalTrack(): void;
    removeLocalTrack(track: RCLocalTrack): void;
    private _updateRecvTransceiverMap;
    updateSubRemoteTracks(remoteTracks: RCRemoteTrack[]): void;
    /**
     * 获取当前已发布视频流信息
     */
    getOutboundVideoInfo(): OutboundVideoInfo[];
    private _onLocalTrackMuted;
    private _onLocalTrackDestroied;
    private _reportListener;
    /**
     * 注册连接数据监控，开启质量数据上报定时器
     * @param listener
     */
    registerReportListener(listener: IRCRTCReportListener | null): void;
    private _createRCRTCStateReport;
    /**
     * 获取 peerConnection stats 数据并格式化
     * @returns 返回格式化后的数据
     */
    private _getStatsData;
    getAudioLevelReportData(): Promise<{
        trackId: string;
        audioLevel: number | null;
    }[] | undefined>;
    /**
     * 通知用户质量数据、peerConnection 北极星数据上报
     * @todo
     */
    private _reportHandle;
    getRTCPeerConn(): RTCPeerConnection;
    destroy(): void;
    clearReTryExchangeTimer(): void;
}

declare type IOnRecvPKMsg = (msg: IReceivedMessage) => void;
interface IRoomPKEventListener {
    /**
     * 收到连麦邀请
     */
    onRequestJoinOtherRoom: (info: IPKInviteInfo) => {};
    /**
     * 收到取消连麦邀请
     */
    onCancelRequestOtherRoom: (info: IPKInviteInfo) => {};
    /**
     * 收到连麦 PK 请求响应结果
     */
    onResponseJoinOtherRoom: (info: IPKInviteAnswerInfo) => {};
    /**
     * 收到 PK 结束
     */
    onFinishOtherRoom: (info: IPKEndInfo) => {};
}
declare class RCLivingPKHandler {
    private _PKInfo;
    private readonly _context;
    private readonly _runtime;
    private readonly _service;
    private readonly _initOptions;
    /**
     * 主直播房间
     */
    private readonly _mainLivingRoom;
    private readonly _registerPKMsgListener;
    /**
     * 加入 PK 房间回调
     */
    private readonly _onJoinedPKRoom;
    /**
     * 退出 PK 房间回调
     */
    private readonly _onLeavePKRoom;
    /**
     * PK 邀请超时时间，默认 30s
     */
    private readonly _inviteTimeout;
    /**
     * PK 房间信息
     */
    private _appListener;
    private _mainRoomId;
    /**
     * 跨房间连麦加入的 PK 房间
     */
    private _joinedPKRooms;
    constructor(_PKInfo: IPKInfo, _context: RTCPluginContext, _runtime: IRuntime, _service: RCMediaService, _initOptions: IRCRTCInitOptions, 
    /**
     * 主直播房间
     */
    _mainLivingRoom: RCLivingRoom, _registerPKMsgListener: (listener: IOnRecvPKMsg) => void, 
    /**
     * 加入 PK 房间回调
     */
    _onJoinedPKRoom: (roomId: string, room: RCLivingRoom) => void, 
    /**
     * 退出 PK 房间回调
     */
    _onLeavePKRoom: (roomId: string) => void);
    private _callAppListener;
    /**
     * 收到连麦邀请
     */
    private _onInvite;
    /**
     * 收到取消连麦
     */
    private _onCancelInvite;
    private _onInviteTimeout;
    /**
     * 收到响应连麦
     */
    private _onInviteAnswer;
    /**
     * 收到连麦结束
     */
    private _onPKEnd;
    /**
     * 处理跨房间连麦相关消息
     */
    private _onRecvPKMsg;
    /**
     * 注册跨房间连麦监听事件
     */
    registerRoomPKEventListener(listener: IRoomPKEventListener): void;
    /**
     * 发起跨房间连麦请求
     * @param inviteeRoomId 被邀请者所处的房间 roomId
     * @param inviteeUserId 被邀请者 userId
     * @param options.autoMix 是否要把邀请者发布的资源，合并到被邀请者房间内的 MCU 流中
     * @param options.extra 拓展字段，可随邀请连麦消息透传给被邀请者
     */
    requestJoinOtherRoom(inviteeRoomId: string, inviteeUserId: string, options?: IReqResPKOptions): Promise<{
        code: RCRTCCode | ErrorCode;
    }>;
    /**
     * 取消跨房间连麦请求
     * @param inviteeRoomId 被邀请者所处的房间 roomId
     * @param inviteeUserId 被邀请者 userId
     * @param extra 附加信息，可随取消邀请连麦消息透传给被邀请者
     */
    cancelRequestJoinOtherRoom(inviteeRoomId: string, inviteeUserId: string, extra?: string): Promise<{
        code: RCRTCCode | ErrorCode;
    }>;
    /**
     * 响应跨房间连麦请求
     * @param inviterRoomId 邀请者所处的房间 roomId
     * @param inviterUserId 邀请者 userId
     * @param agree 是否同意连麦
     * @param options.autoMix 是否要把被邀请者发布的资源，合并到邀请者房间内的 MCU 流中
     * @param options.extra 附加信息，可随响应连麦消息透传给邀请者
     */
    responseJoinOtherRoom(inviterRoomId: string, inviterUserId: string, agree: boolean, options?: IReqResPKOptions): Promise<{
        code: RCRTCCode | ErrorCode;
    }>;
    /**
     * 结束跨房间连麦
     * @param roomId 需要结束连麦的房间 roomId
     */
    private _quitRoomPK;
    private _relaseCrtRoom;
    /**
     * 加入副直播房间
     * @roomId 副房间的 roomId
     */
    joinOtherRoom(roomId: string): Promise<{
        code: RCRTCCode;
        room?: RCLivingRoom;
        userIds?: string[];
        tracks?: RCRemoteTrack[];
        CDNEnable?: boolean;
    }>;
    /**
     * 退出副房间
     * @param room 要退出的副房间的 room 实例
     * @param isQuitPK 是否要结束连麦
     */
    leaveOtherRoom(room: RCLivingRoom, isQuitPK?: boolean): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 获取连麦信息
     * @param roomId 连麦房间的 roomId
     */
    getPKInfo(roomId: string): {
        inviteSessionId: string;
        inviterRoomId: string;
        inviterUserId: string;
        inviterUserAutoMix?: boolean | undefined;
        inviteeRoomId: string;
        inviteeUserAutoMix?: boolean | undefined;
    };
    /**
     * 获取所有连麦信息
     */
    getAllPKInfo(): IPKInfo;
    /**
     * 获取已加入的副房间
     */
    getJoinedPKRooms(): {
        [roomId: string]: RCLivingRoom;
    };
}

/**
 * 房间抽象基类
 */
declare abstract class RCAbstractRoom {
    protected readonly _context: RTCPluginContext;
    private readonly _runtime;
    readonly _roomId: string;
    protected readonly _roomMode: RTCMode;
    protected readonly _service: RCMediaService;
    protected readonly _initOptions: IRCRTCInitOptions;
    private readonly _ntfClearRoomItem;
    protected _isMainRoom?: boolean | undefined;
    /**
     * 房间资源数据
     */
    protected readonly _roomResources: RoomData;
    /**
     * 远端 track
     */
    private _remoteTracks;
    /**
     * 已订阅参数
     */
    protected readonly _subscribedList: ISubscribeAttr[];
    /**
     * 房间保活 rtcPing
     */
    private readonly _pinger;
    /**
     * 与 MediaServer 交互需要的 token 信息
     */
    protected readonly _token: string;
    /**
     * 每次加入房间后都会改变
     */
    private readonly _sessionId;
    /**
     * PeerConnection 连接实例
     */
    protected readonly _pc: RCRTCPeerConnection;
    private _destroyed;
    /**
     * 北极星上报实例
     */
    protected _polarisReport: PolarisReporter | null;
    /**
     * 音量上报实例
     */
    private _audioLevelReport;
    constructor(_context: RTCPluginContext, _runtime: IRuntime, _roomId: string, data: IJoinRTCRoomData, _roomMode: RTCMode, _service: RCMediaService, _initOptions: IRCRTCInitOptions, _ntfClearRoomItem: Function, isUpgrade?: boolean, _isMainRoom?: boolean | undefined);
    private _initRemoteTracks;
    private _handlePingResult;
    /**
     * 设置房间上行资源的总码率配置
     * @description
     * * 自 v5.1.0 版本开始，推荐使用 `RCLocalTrack.setBitrate` 对不同流分别指定码率。
     * * 该方法仅在 SDP `plan-b` 协议下（Chrome 92 与 Safari 11 之前的版本）有效。
     * @param max 音视频发送码率上限，不可小于 200 且不可小于 `min`
     * @param min 音视频发送码率下限，默认值为 1，且不可小于 1，不可大于 `max`
     * @param start 起始码率，默认为码率上限的 70%
     */
    setBitrate(max: number, min: number, start?: number): void;
    private _onTrackReady;
    protected _callAppListener(eventType: keyof IRoomEventListener, ...attrs: any[]): void;
    private _onUserUnpublish;
    private _onTrackUnpublish;
    private _unpublishPrev;
    __parseInnerMessage(message: IReceivedMessage): boolean;
    private msgTaskQueue;
    /**
     * 被踢出房间通知
     * @param byServer
     * * 当值为 false 时，说明本端 rtcPing 超时
     * * 当值为 true 时，说明本端收到被踢出房间通知
     */
    private _kickoff;
    private _rtcpeerClosed;
    /**
     * 处理资源变更事件
     * @param content
     * @param messageType 消息类型
     * @param userId 消息发送者
     */
    protected _resourceHandle(content: {
        /**
         * 旧版本兼容参数，当收到非 `RTCMessageName.TOTAL_CONTENT_RESOURCE` 时：
         * * ignore 值为 `true` 表示该消息由 signal server 向旧版本 RTCLib 提供的兼容消息，无需处理
         * * 否则认为该消息是由旧版本 RTCLib 主动发出的增量变更消息，需要处理
         */
        ignore?: boolean;
        /**
         * 发布到房间内的资源列表，`RTCMessageName.TOTAL_CONTENT_RESOURCE` 消息携带全量数据，否则为增量数据
         */
        uris: IPublishedResource[];
    }, messageType: string, userId: string): Promise<void>;
    private _onTrackPublish;
    /**
     * 处理 `RCRTCMessageType.STATE` 消息
     * @param content
     */
    private _stateHandle;
    /**
     * 获取房间 Id
     */
    getRoomId(): string;
    /**
     * 获取当前 userId
     */
    getCrtUserId(): string;
    /**
     * 获取 _pc 实例
     */
    __getPC(): RCRTCPeerConnection;
    /**
     * 获取远程用户列表，不包含当前用户
     */
    getRemoteUserIds(): string[];
    /**
     * 获取所有房间已发布的远端资源列表
     * @returns
     */
    getRemoteTracks(): RCRemoteTrack[];
    /**
     * 获取远端用户的资源列表
     * @param userId
     * @returns
     */
    getRemoteTracksByUserId(userId: string): RCRemoteTrack[];
    /**
     * 获取房间当前会话 Id，当房间内已无成员时房间会回收，重新加入时 sessionId 将更新
     */
    getSessionId(): string;
    /**
     * 向房间内发消息
     * @param name 消息名称
     * @param content 消息内容
     */
    sendMessage(name: string, content: any): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 设置房间属性
     * @param key 属性名
     * @param value 属性值
     * @param message 是否在设置属性的时候携带消息内容，传空则不往房间中发送消息
     * @param isInner RTC 业务内部使用参数，用户忽略
     */
    setRoomAttribute(key: string, value: string, message?: {
        name: string;
        content: string;
    }, isInner?: boolean): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 删除房间属性
     * @param keys 待删除的属性名数组
     * @param message 是否在删除属性的时候携带消息内容，传空则不往房间中发送消息
     * @param isInner RTC 业务内部使用参数，用户忽略
     */
    deleteRoomAttributes(keys: string[], message?: {
        name: string;
        content: string;
    }, isInner?: boolean): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 获取房间属性
     * @param keys 要查询的属性名数组，当数组长度为空时，取所有已设置的 kv 值
     * @param isInner RTC 业务内部使用参数，用户忽略
     */
    getRoomAttributes(keys?: string[], isInner?: boolean): Promise<{
        code: RCRTCCode;
        data?: KVString;
    }>;
    /**
     * 设置当前用户属性（暂不开放）
     * @param key 属性名
     * @param value 属性值
     * @param message 是否在设置属性的时候携带消息内容，传空则不往房间中发送消息
     */
    private _setUserAttributeValue;
    /**
     * 删除当前用户属性（暂不开放）
     * @param keys 待删除的属性名数组
     * @param message 是否在删除属性的时候携带消息内容，传空则不往房间中发送消息
     */
    private _deleteUserAttributes;
    /**
     * 获取当前用户属性（暂不开放）
     * @param keys 要查询的属性名数组
     */
    private _getUserAttributes;
    /**
     * 查询房间是否已销毁
     */
    isDestroyed(): boolean;
    /**
     * 退出并销毁当前房间实例，退出后该房间的所有方法将不可用
     */
    __destroy(quitRoom: boolean): Promise<void>;
    private _leaveHandle;
    private _onLocalTrackDestroied;
    /**
     * 本端流状态修改，需通知房间内其他成员
     * @param localTrack
     */
    private _onLocalTrackMuted;
    /**
     * 发布默认流，默认流的 TAG 为 `RongCloudRTC`，分辨率 640*480，帧率 15 帧
     * @param pubTiny 是否同步发小流
     */
    /**
     * 从 pc 移除当次发布失败的资源
     */
    private _removePubFailedTracks;
    /**
     * 增量发布资源，若发布的资源 tag 及媒体类型重复，后者将覆盖前者进行发布。
     * @param tracks 待发布的 RCLocalTrack 实例
     * @returns
     */
    publish(tracks: (RCLocalTrack | IPublishAttrs)[]): Promise<{
        code: RCRTCCode;
        liveUrl?: string;
    }>;
    private __publish;
    /**
     * 获取跨房间连麦需携带参数 pushOtherRooms 的值
     */
    protected _getPushOtherRoomsParams(): {
        roomId: string;
        sessionId: string;
        autoMix: boolean;
    }[] | undefined;
    /**
     * ice 断线后，尝试重新走 exchange
     */
    protected _reTryExchange(): Promise<void>;
    protected _exchangeHandle(body: IExchangeReqBody): Promise<{
        code: RCRTCCode;
        data?: IExchangeResponse | undefined;
    }>;
    protected _getRTCReqestHeaders(): IRTCReqHeader;
    /**
     * 获取 exchange 接口的请求体数据
     * @param subscribeList 订阅清单
     * @param iceRestart
     */
    protected _createExchangeParams(subscribeList: ISubscribeAttr[], iceRestart: boolean): Promise<IExchangeReqBody>;
    /**
     * 获取已发布资源的 state 数据
     * @param trackId
     */
    private _getResourceState;
    /**
     * 增量取消资源发布，若相应资源中存在小流资源，则同时取消发布
     * @param resourceIds 取消发布的资源 Id 列表
     */
    unpublish(tracks: RCLocalTrack[]): Promise<{
        code: RCRTCCode;
    }>;
    private __unpublish;
    /**
     * 根据资源 Id 获取资源数据
     * @param resourceId
     */
    private _getResourceById;
    /**
     * resourceId 有效性验证
     * @param resourceId
     */
    protected _isValidResourceId(resourceId: string): boolean;
    /**
     * 订阅资源
     * @param tracks
     */
    subscribe(tracks: (RCRemoteTrack | ISubscribeAttr)[]): Promise<{
        code: RCRTCCode;
        failedList?: ISubscribeAttr[];
    }>;
    private __subscribe;
    /**
     * 取消订阅资源
     * @param tracks 预取消远端资源
     */
    unsubscribe(tracks: RCRemoteTrack[]): Promise<{
        code: RCRTCCode;
        failedList?: ISubscribeAttr[];
    }>;
    private __unsubscribe;
    protected _assertRoomDestroyed(): RCRTCCode | undefined;
    /**
     * 获取已发布的本地资源
     * @param trackId
     * @returns
     */
    getLocalTrack(trackId: string): RCLocalTrack | null;
    /**
     * 获取所有已发布的资源
     */
    getLocalTracks(): RCLocalTrack[];
    /**
     * 根据 trackId 获取房间内的远端资源
     * @param trackId
     * @returns
     */
    getRemoteTrack(trackId: string): RCRemoteTrack | null;
    /**
     * 强制修改订阅列表，仅订阅数组中的资源，取消订阅其他已订阅资源。
     * 当参数为 `[]` 时，意味着不再订阅任何资源
     * @param tracks 变更的资源列表
     */
    updateSubList(tracks: (RCRemoteTrack | ISubscribeAttr)[]): Promise<{
        code: RCRTCCode;
    }>;
    private _updateSubListHandle;
    private _appListener;
    /**
     * 注册事件监听器，多次注册会导致后者覆盖前者，可以通过使用 `registerRoomEventListener(null)` 取消注册
     * @param listener
     */
    registerRoomEventListener(listener: IRoomEventListener | null): void;
    /**
     * 注册房间数据监控
     * @param listener
     * @description 该方法暂仅支持 Chrome 浏览器
     */
    registerReportListener(listener: IRCRTCReportListener | null): void;
    /**
     * 音量上报
     * @param handler 业务端传入的音量上报事件
     * @param gap 上报时间间隔
     */
    onAudioLevelChange(handler: IAudioLevelChangeHandler | null, gap?: number): void;
    /**
     * 断线重连后尝试补发断线过程中的通知信息
     */
    __onReconnected(livingType?: RCLivingType): Promise<{
        data: IJoinRTCRoomData | undefined;
    } | void>;
    private _onAudioMuteChange;
    private _onVideoMuteChange;
    /**
     * 观众切换为主播后直接处理人员变更及资源变更
     */
    protected _afterChangedRole(data: IJoinRTCRoomData): void;
    /**
     * 销毁远端资源
     */
    private _removeRemoteTracks;
    /**
     * 存储连麦监听事件
     */
    private _onRecvPKMsg;
    /**
     * 注册 PK 业务监听方法
     */
    protected _registerPKMsgListener(listener: IOnRecvPKMsg | null): void;
    /**
     * 退出 PK 房间
     */
    protected _quitAllPKRoom(): void;
}

/**
 * 自定义合流布局时，背景图片填充方式
 */
declare enum BackgroundPictureFillMode {
    /**
     * 裁剪（默认）
     */
    CROP = 1,
    /**
     * 不裁剪
     */
    WHOLE = 2
}

declare class RCMCUConfigBuilder {
    /**
     * flush 提交回调
     */
    private readonly _onFlush;
    /**
     * trackId 有效性验证方法
     */
    private readonly _isValidTrackId;
    /**
     * 扩散 cdn_uris
     */
    private readonly _sendCDNInfoSignal;
    /**
     * mcu 配置数据，每次向服务器提交全量数据
     */
    private _values;
    constructor(
    /**
     * flush 提交回调
     */
    _onFlush: (config: IMCUConfig) => Promise<{
        code: RCRTCCode;
    }>, 
    /**
     * trackId 有效性验证方法
     */
    _isValidTrackId: (trackId: string) => boolean, 
    /**
     * 扩散 cdn_uris
     */
    _sendCDNInfoSignal: () => void);
    /**
     * 设置合流后的主位置显示的视频流
     * @param videoTrackId 视频流资源 Id
     */
    setHostVideoTrack(videoTrackId: string): RCMCUConfigBuilder;
    /**
     * 设置合流布局模式，当使用 `MixLayoutMode.CUSTOMIZE` 模式时，需自定义合流结构
     * @param mode
     * * `MixLayoutMode.CUSTOMIZE`: 自定义布局，需用户设置布局结构
     * * `MixLayoutMode.SUSPENSION`: 悬浮布局（默认）
     * * `MixLayoutMode.ADAPTATION`: 自适应布局
     */
    setMixLayoutMode(mode: MixLayoutMode): RCMCUConfigBuilder;
    private _addOutputValue;
    /**
     * 设置合流输出视频流的分辨率
     * @param resulution 有效值为 `RCResolution` 定义的枚举值
     */
    setOutputVideoResolution(resolution: RCResolution): RCMCUConfigBuilder;
    /**
     * 设置合流输出视频流的帧率
     * @param fps 其有效值为 `RCFrameRate` 中定义的枚举值
     */
    setOutputVideoFPS(fps: RCFrameRate): RCMCUConfigBuilder;
    /**
     * 设置合流输出视频流的码率（不推荐主动修改）
     * @param bitrate
     */
    setOutputVideoBitrate(bitrate: number): RCMCUConfigBuilder;
    /**
     * 设置合流后输出视频流小流的分辨率
     * @param resulution 有效值为 `RCResolution` 定义的枚举值
     */
    setOutputTinyVideoResolution(resolution: RCResolution): RCMCUConfigBuilder;
    /**
     * 设置合流输出视频流小流的帧率
     * @param fps 其有效值为 `RCFrameRate` 中定义的枚举值
     */
    setOutputTinyVideoFPS(fps: RCFrameRate): RCMCUConfigBuilder;
    /**
     * 设置合流输出视频流小流的码率（不推荐主动修改）
     * @param bitrate
     */
    setOutputTinyVideoBitrate(bitrate: number): RCMCUConfigBuilder;
    /**
     * 设置合流后的视频流渲染方式
     * @param renderMode
     */
    setOutputVideoRenderMode(renderMode: MixVideoRenderMode): RCMCUConfigBuilder;
    /**
     * 设置合流后音频流的编码参数（不推荐主动修改）
     * @param bitrate 音频码率
     */
    setOutputAudioBitrate(bitrate: number): RCMCUConfigBuilder;
    /**
     * 设置合流后的视频流的背景色，默认为 `0x000000`
     * @param color 颜色参数，为 16 进制标识法，如 '0x000000'
     */
    setOutputBackgroundColor(color: string): RCMCUConfigBuilder;
    /**
     * 向合流后的视频流中增加背景图片
     * @param uri 图片资源的完整下载地址
     * @param x 相对于整体画布的起始位置 x 坐标（百分比），有效值 `0.0` - `1.0`
     * @param y 相对于整体画布的起始位置 y 坐标（百分比），有效值 `0.0` - `1.0`
     * @param w 相对于整体画布的宽（百分比），有效值 `0.0` - `1.0`
     * @param h 相对于整体画布的高（百分比），有效值 `0.0` - `1.0`
     */
    addOutputBackgroundPicture(uri: string, x: number, y: number, w: number, h: number): RCMCUConfigBuilder;
    /**
     * 移除对合流后的视频流中添加的指定背景图片
     * @param uri
     */
    removeOutputBackgroundPicture(uri: string): RCMCUConfigBuilder;
    /**
     * 清理对合流后的视频流中添加的所有背景图片
     */
    clearOutputBackgroundPicture(): RCMCUConfigBuilder;
    /**
     * 设置合流后的视频流中添加的背景图片的填充方式：
     * 1. 按比例裁剪
     * 2. 不裁剪，按比例压缩
     * @param fillMode
     */
    setOutputBackgroundPictureFillMode(fillMode: BackgroundPictureFillMode): RCMCUConfigBuilder;
    /**
     * 设置直播 CDN 旁路推流地址，最多支持 5 个推流地址
     * @param urls 地址列表
     */
    addPublishStreamUrls(urls: string[]): RCMCUConfigBuilder;
    /**
     * 移除直播 CDN 旁路推流地址
     * @param urls
     */
    removePublishStreamUrls(urls: string[]): RCMCUConfigBuilder;
    /**
     * 清理已添加的 CDN 旁路推流地址
     */
    clearPublishStreamUrls(): RCMCUConfigBuilder;
    /**
     * 在自定义布局中增加视频流配置
     * @param trackId 资源 Id
     * @param x 在画布中的坐标 x
     * @param y 在画布中的坐标 y
     * @param width 分辨率宽度
     * @param height 分辨率高度
     */
    addCustomizeLayoutVideo(trackId: string, x: number, y: number, width: number, height: number): RCMCUConfigBuilder;
    /**
     * 移除自定义布局中的视频流配置
     * @param trackId
     */
    removeCustomizeLayoutVideo(trackId: string): RCMCUConfigBuilder;
    /**
     * 清除已添加的自定义布局中的视频流配置
     */
    clearCustomizeLayoutVideo(): RCMCUConfigBuilder;
    /**
     * 使已修改的配置生效，在调用该方法前，所有数据只会对本地配置进行修改，不会产生实际效果
     */
    flush(): Promise<{
        code: RCRTCCode;
    }>;
}

/**
 * 直播房间
 */
declare class RCLivingRoom extends RCAbstractRoom {
    private _livingType;
    /**
     * 是否是主房间
     */
    protected _isMainRoom: boolean;
    readonly _mcuConfigBuilder: RCMCUConfigBuilder;
    /**
     * cdn_uris 信令扩散数据
     */
    private _CDNUris;
    private _CDNEnable;
    /**
     * 跨房间连麦管理器
     */
    private readonly _roomPKHandler;
    constructor(context: RTCPluginContext, runtime: IRuntime, roomId: string, data: IJoinRTCRoomData, service: RCMediaService, initOptions: IRCRTCInitOptions, clientEvent: Function, _livingType: RCLivingType, isUpgrage: boolean | undefined, 
    /**
     * 是否是主房间
     */
    _isMainRoom: boolean);
    /**
     * resourceId 有效性验证
     * @param resourceId
     */
    protected _isValidResourceId(resourceId: string): boolean;
    getLivingType(): RCLivingType;
    /**
     * 获取 MCU 配置构建对象
     */
    getMCUConfigBuilder(): RCMCUConfigBuilder | {
        code: RCRTCCode;
    };
    /**
     * 接收 MCU 配置并向 MediaServer 提交
     * @param data
     */
    private _onMCUConfigFlush;
    /**
     * 主播端断线重连后，需更新内存中的 CDN 数据
     * 判断房间内 CDN 状态是否和内存数据一致，不一致时需通知到客户端
     */
    __onReconnected(): Promise<void>;
    /**
     * 开启/停用推 CDN
     */
    enableInnerCDN(enable: boolean): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 开启、停用 CDN 推资源后发信令
     */
    private _sendCDNInfoSignal;
    /**
     * 扩散 cdn_uris 资源
     */
    private _spreadCDNInfo;
    /**
     * 给房间设置 CDN 数据
     */
    private _setRoomCDNInfo;
    /**
     * 资源变化时触发
     * 直播房间需单独处理 cdn_uris
     */
    protected _resourceHandle(content: {
        /**
         * 旧版本兼容参数，当收到非 `RTCMessageName.TOTAL_CONTENT_RESOURCE` 时：
         * * ignore 值为 `true` 表示该消息由 signal server 向旧版本 RTCLib 提供的兼容消息，无需处理
         * * 否则认为该消息是由旧版本 RTCLib 主动发出的增量变更消息，需要处理
         */
        ignore?: boolean;
        /**
         * 发布到房间内的资源列表，`RTCMessageName.TOTAL_CONTENT_RESOURCE` 消息携带全量数据，否则为增量数据
         */
        uris: IPublishedResource[];
        cdn_uris?: ICDNUris[];
    }, messageType: string, userId: string): Promise<void>;
    /**
     * 重写父类 _exchangeHandle 方法
     */
    protected _exchangeHandle(body: IExchangeReqBody): Promise<{
        code: RCRTCCode;
        data?: IExchangeResponse | undefined;
    }>;
    /**
     * 观众切换为主播后直接处理人员变更及资源变更
     */
    protected _afterChangedRole(data: IJoinRTCRoomData): void;
    /**
     * 返回 CDN 是否可用
     * @returns boolean
     */
    __getCDNEnable(): boolean | undefined;
    /**
     * 返回 CDN 推送模式: 自动 or 手动
     * @returns boolean
     */
    __getCDNPushMode(): RCInnerCDNPushMode | undefined;
    /**
     * 加入 PK 房间回调
     */
    private _onJoinedPKRoom;
    /**
     * 离开 PK 房间后，如果参与过连麦，pushOtherRooms 需去掉退出的连麦房间配置，重新和 mediaServer 交互
     */
    private _onLeavePKRoom;
    /**
     * 携带 pushOtherRooms 与 mediaServer 重新交互
     */
    private _exchangeWithPushOtherRoom;
    /**
     * 获取 PK 业务处理器
     * @since version 5.3.0
     */
    getRoomPKHandler(): {
        code: RCRTCCode;
        roomPKHandler?: RCLivingPKHandler;
    };
    /**
     * 退出所有连麦房间
     */
    protected _quitAllPKRoom(): void;
    /**
     * 是否是主房间
     */
    isMainRoom(): boolean;
}

/**
 * 普通音视频房间
 */
declare class RCRTCRoom extends RCAbstractRoom {
    constructor(context: RTCPluginContext, runtime: IRuntime, roomId: string, data: IJoinRTCRoomData, service: RCMediaService, initOptions: IRCRTCInitOptions, clientEvent: Function);
}

/**
 * 直播观众客户端
 */
declare class RCAudienceClient {
    private readonly _context;
    private _pc;
    private _service;
    /**
     * RTCToken
     */
    private _rtcToken;
    /**
     * 已订阅的资源信息
     */
    private _liveUrl;
    /**
     * 已订阅的远端流
     */
    private readonly _subTracks;
    /**
     * 客户端传入的数据上报事件
     */
    private _reportListener;
    constructor(_context: RTCPluginContext, runtime: IRuntime, _initOption: IRCRTCInitOptions);
    private _getReqHeaders;
    private _clearSubscribeInfo;
    private _livingType;
    private _mediaType;
    private _subTiny;
    private _fromRetry;
    private _reTryExchange;
    /**
     * 直播观众订阅主播资源，直播观众端无需加入房间
     * @param liveUrl 直播资源地址
     * @param livingType 直播类型，有效值为音频、音视频
     * @param mediaType 订阅资源类型，其有效值为 `RCMediaType` 的枚举值
     * @param subTiny 当值为 `true` 时将订阅小流，否则订阅大流。默认值为 `false`
     */
    subscribe(liveUrl: string, livingType: RCLivingType, mediaType: RCMediaType, subTiny?: boolean): Promise<{
        code: RCRTCCode;
        tracks: RCRemoteTrack[];
    }>;
    private __subscribe;
    /**
     * 取消订阅主播资源
     * @param liveUrl
     */
    unsubscribe(): Promise<{
        code: RCRTCCode;
    }>;
    private __unsubscribe;
    /**
     * 注册房间数据监控
     * @param listener
     * @description 该方法暂仅支持 Chrome 浏览器
     */
    registerReportListener(listener: IRCRTCReportListener | null): void;
    private _appListener;
    /**
     * 注册流事件监听，多次注册会导致后者覆盖前者，可以通过使用 `registerTrackEventListener(null)` 取消注册
     * @param listener
     */
    registerTrackEventListener(listener: IRCRTCTrackEventListener | null): void;
    private _onTrackReady;
}

/**
 * RTC 业务客户端
 * @public
 */
declare class RCRTCClient {
    private readonly _context;
    private readonly _runtime;
    private readonly _options;
    private readonly _service;
    constructor(_context: RTCPluginContext, _runtime: IRuntime, _options: IRCRTCInitOptions);
    private _handleMessage;
    /**
     * 获取加入的连麦房间
     */
    private _getJoinedPKRoomList;
    private _getPKRoomIds;
    /**
     * 获取当前用户 Id，若 IM 未连接，这返回 `''`
     * @returns
     */
    getCurrentId(): string;
    private _crtRoom;
    /**
     * 加入普通音视频房间
     * @param roomId
     * @param joinType 多端处理方式
     * @param outerUserDatas 业务层设置人员属性
     */
    joinRTCRoom(roomId: string, joinType?: RTCJoinType, outerUserDatas?: IRTCUserData): Promise<{
        room?: RCRTCRoom;
        code: RCRTCCode;
        userIds?: string[];
        tracks?: RCRemoteTrack[];
    }>;
    private _joinRTCRoom;
    /**
     * 主播加入直播房间或观众上麦场景调用，观众上麦之前需先取消已订阅的直播间资源
     * @param roomId 房间 Id
     * @param livingType 直播间类型，`RCLivingType.AUDIO` 为音频直播，`RCLivingType.VIDEO` 为音视频直播
     * @param joinType 多端处理方式
     * @param outerUserDatas 业务层设置人员属性
     */
    joinLivingRoom(roomId: string, livingType: RCLivingType, joinType?: RTCJoinType, outerUserDatas?: IRTCUserData): Promise<{
        room?: RCLivingRoom;
        code: RCRTCCode;
        userIds?: string[];
        tracks?: RCRemoteTrack[];
        CDNEnable?: boolean;
    }>;
    private _joinLivingRoom;
    private _audience;
    /**
     * 获取直播观众客户端
     */
    getAudienceClient(): RCAudienceClient;
    private _onIMStatusChange;
    private _onIMDisconnect;
    private _onIMUninit;
    /**
     * 退出并销毁当前房间实例，退出后该房间的所有方法将不可用
     */
    leaveRoom(room: RCAbstractRoom): Promise<{
        code: RCRTCCode;
    }>;
    private _leaveRoom;
    /**
     * 清除 _crtRoom 的引用
     */
    private _releaseCrtRoomObj;
    private _getMediaStream;
    /**
     * 从麦克风中捕获音轨数据
     * @param tag
     * @param options
     * @returns
     */
    createMicrophoneAudioTrack(tag?: string, options?: IMicphoneAudioProfile): Promise<{
        code: RCRTCCode;
        track?: RCMicphoneAudioTrack;
    }>;
    /**
     * 由摄像头捕获视轨数据
     * @param tag
     * @param options
     * @returns
     */
    createCameraVideoTrack(tag?: string, options?: ICameraVideoProfile): Promise<{
        code: RCRTCCode;
        track?: RCCameraVideoTrack;
    }>;
    /**
     * 通过摄像头与麦克风采集音视频轨道数据
     * @param tag
     * @param options
     * @returns
     */
    createMicrophoneAndCameraTracks(tag?: string, options?: {
        audio?: IMicphoneAudioProfile;
        video?: ICameraVideoProfile;
    }): Promise<{
        code: RCRTCCode;
        tracks: RCLocalTrack[];
    }>;
    /**
     * 创建屏幕共享视频流，默认分辨率 `1280 * 720`，帧率 `15`
     * @param tag 屏幕共享视轨数据标识
     * @param options
     * @description
     * 支持 Electron 平台下通过制定 `chromeMediaSourceId` 的方式获取屏幕共享视频。
     * 参考：https://www.electronjs.org/docs/api/desktop-capturer
     */
    createScreenVideoTrack(tag?: string, options?: IScreenVideoProfile): Promise<{
        code: RCRTCCode;
        track?: RCScreenVideoTrack;
    }>;
    /**
     * 创建 RCLocalAudioTrack 实例
     * @param tag
     * @param track
     * @returns
     */
    createLocalAudioTrack(tag: string, track: MediaStreamTrack): Promise<{
        code: RCRTCCode;
        track?: RCLocalAudioTrack;
    }>;
    /**
     * 创建 RCLocalVideoTrack 实例
     * @param tag 视轨数据标识
     * @param track MediaStreamTrack 实例
     * @returns
     */
    createLocalVideoTrack(tag: string, track: MediaStreamTrack): Promise<{
        code: RCRTCCode;
        track?: RCLocalVideoTrack;
    }>;
    /**
     * 根据本地或网络媒体文件资源创建 `RCLocalFileTrack` 实例
     * @param tag 资源标识
     * @param file 网络文件地址，或通过 <input type='file'> 获取到的 File 实例
     * @param options 可用于指定 `withoutVideo` 与 `withoutAudio` 以剔除视轨与音轨
     */
    createLocalFileTracks(tag: string, file: string | File, options?: ICreateLocalTrackOptions): Promise<{
        code: RCRTCCode;
        tracks: RCLocalFileTrack[];
    }>;
    /**
     * 根据 MediaStream 实例对象创建 RCLocalTrack 实例
     * @param tag 轨道标识
     * @param stream MediaStream 实例
     * @param options 可用于指定 `withoutVideo` 与 `withoutAudio` 以剔除视轨与音轨
     * @returns
     */
    createLocalTracks(tag: string, stream: MediaStream, options?: ICreateLocalTrackOptions): Promise<{
        code: RCRTCCode;
        tracks: RCLocalTrack[];
    }>;
    private _crtAudienceLivingRoom;
    /**
     * 观众加入直播房间
     * @param roomId 房间 ID
     * @param livingType 直播类型（音频直播 or 音视频直播）
     */
    joinLivingRoomAsAudience(roomId: string, livingType: RCLivingType): Promise<{
        room?: RCAudienceLivingRoom;
        code: RCRTCCode;
        userIds?: string[];
        RTCTracks?: RCRemoteTrack[];
        MCUTracks?: RCRemoteTrack[];
        CDNUris?: IJoinResCDNInfo;
    }>;
    /**
     * 观众退出并销毁当前房间实例，退出后该房间的所有方法将不可用
     */
    leaveLivingRoomAsAudience(room: RCAudienceLivingRoom): Promise<{
        code: RCRTCCode;
    }>;
    /**
     * 升级为主播房间
     * @param room 观众房间实例
     */
    upgradeToAnchorRoom(room: RCAudienceLivingRoom): Promise<{
        room?: RCLivingRoom;
        code: RCRTCCode;
        userIds?: string[];
        tracks?: RCRemoteTrack[];
    }>;
    /**
     * 降级为观众房间
     * @param room 主播房间实例
     */
    downgradeToAudienceRoom(room: RCLivingRoom): Promise<{
        room?: RCAudienceLivingRoom;
        code: RCRTCCode;
        userIds?: string[];
        RTCTracks?: RCRemoteTrack[];
        MCUTracks?: RCRemoteTrack[];
        CDNUris?: IJoinResCDNInfo;
    }>;
    /**
     * 获取在房间内用户信息
     * @since version 5.2.1
     */
    getJoinedRoomInfo(): Promise<{
        code: RCRTCCode;
        data?: IRTCJoinedInfo[];
    }>;
}

/**
 * 验证浏览器是否支持创建自定义文件流
 * @returns
 */
declare function ifSupportLocalFileTrack(): boolean;
/**
 * 验证浏览器是否支持屏幕共享
 * @returns
 */
declare function ifSupportScreenShare(): boolean;

declare const device: {
    getCameras: () => Promise<MediaDeviceInfo[]>;
    getMicrophones: () => Promise<MediaDeviceInfo[]>;
    getSpeakers: () => Promise<MediaDeviceInfo[]>;
};

/**
 * RTC 插件生成器
 * @public
 */
declare const installer: IPluginGenerator<RCRTCClient, IRCRTCInitOptions>;
/**
 * 预定义的资源 tag
 */
declare const RCTag: {
    /**
     * 默认流 Tag 定义
     */
    DEFAULT: string;
};

declare const helper: {
    transResolution: (resolution: RCResolution) => {
        width: number;
        height: number;
    };
    transFrameRate: (fps: RCFrameRate) => number;
    parseTrackId: (trackId: string) => {
        mediaType: RCMediaType;
        tag: string;
        userId: string;
    };
    ifSupportLocalFileTrack: typeof ifSupportLocalFileTrack;
    ifSupportScreenShare: typeof ifSupportScreenShare;
};

export { BackgroundPictureFillMode, ICameraVideoProfile, IMCUOutputConfig, IMCUOutputVideoConfig, IMicphoneAudioProfile, IPKEndInfo, IPKInviteAnswerInfo, IPKInviteInfo, IPublishAttrs, IPublishedResource, IRCCandidatePairStat, IRCRTCInitOptions, IRCRTCReportListener, IRCRTCStateReport, IRCTrackStat, IReqResPKOptions, IRoomEventListener, IRoomPKEventListener, ISubscribeAttr, IVideoProfile, MixLayoutMode, MixVideoRenderMode, RCAbstractRoom, RCAudienceClient, RCAudienceLivingRoom, RCCameraVideoTrack, RCFrameRate, RCInnerCDNPullIsHttps, RCInnerCDNPullKind, RCKickReason, RCLivingRoom, RCLivingType, RCLocalAudioTrack, RCLocalFileAudioTrack, RCLocalFileTrack, RCLocalFileVideoTrack, RCLocalTrack, RCLocalVideoTrack, RCMCUConfigBuilder, RCMediaType, RCMicphoneAudioTrack, RCRTCClient, RCRTCCode, RCRTCLiveRole, RCRTCPingResult, RCRTCRoom, RCRemoteAudioTrack, RCRemoteTrack, RCRemoteVideoTrack, RCResolution, RCScreenVideoTrack, RCTag, RCTrack, device, helper, installer };
