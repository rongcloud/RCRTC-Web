import { LogLevel, MessageDirection, IReadReceiptInfo, IPushConfig, IPluginGenerator, IAsyncRes, ConnectionStatus, IEventListener, NotificationStatus, IConversationOption, ConversationType, ErrorCode, IBaseConversationInfo, IConversationState, IReceivedConversation, IChatroomInfo, IChatRoomEntry, IChatRoomEntries, IRemoveChatRoomEntry, IRemoveChatRoomEntries, IRTCRoomBindOption, MentionedType, IUserProfile, IMessageReaderResponse, IReceivedMessage, ITagParam, ITagInfo, IConversationTag, IReceivedConversationByTag, FileType, IUploadAuth, UploadMethod } from '@rongcloud/engine';
export { ConnectionStatus, ConversationType, ErrorCode, IBlockedMessageInfo, IChatRoomEntries, IChatRoomEntry, IChatroomListenerData, IConversationOption, IConversationState, IDeletedExpansion, IExpansionListenerData, IPluginGenerator, IRTCRoomBindOption, IRemoveChatRoomEntries, IRemoveChatRoomEntry, IUpdatedExpansion, LogLevel, MentionedType, MessageBlockType, MessageDirection, NotificationStatus, ReceivedStatus, UploadMethod } from '@rongcloud/engine';

declare type IInitOption = {
    /**
     * 应用 appkey 标识
     */
    appkey: string;
    /**
     * 修改 engine log 打印等级
     */
    logLevel?: LogLevel;
    /**
     * 修改默认的 log 输出函数
     */
    logStdout?: (logLevel: LogLevel, content: string) => void;
    /**
     * 自定义导航地址，公有云用户不推荐修改
     */
    navigators?: string[];
    /**
     * 连接方式，默认使用 'websocket'
     */
    connectType?: 'websocket' | 'comet';
    /**
     * 小程序平台专属配置
     */
    customCMP?: string[];
    /**
     * 是否打开 IndexDB 存储, 默认为 true
     */
    indexDBSwitch?: boolean;
    /**
     * 是否校验证书，默认为 true
     */
    checkCA?: boolean;
};
/**
 * 用户收到的消息结构
 */
interface IAReceivedMessage {
    /**
     * 消息类型
     * @example RC:TxtMsg
     */
    messageType: string;
    /**
     * 消息内容
     */
    content: Object;
    /**
     * 消息发送者的用户 id
     */
    senderUserId: string;
    /**
     * 会话 id
     */
    targetId: string;
    /**
     * 会话的业务标识
     */
    channelId: string;
    /**
     * 会话类型
     * * 1: 单聊
     * * 3: 群聊
     * * 4: 聊天室
     * * 5: 客服会话
     * * 6: 系统消息
     * * 7: 默认关注的公众号
     * * 8: 手动关注的公众号
     * * 9: RTCLib 房间
     */
    conversationType: number;
    /**
     * 消息在服务器端的发送时间
     */
    sentTime: number;
    /**
     * 消息接收时间，该时间通过消息的 `sentTime` 值在本地进行计算得出，不推荐使用
     * @description 当 isOffLineMessage 为 true 时，该值无效
     */
    receivedTime: number;
    /**
     * 服务端存储的消息 Id
     */
    messageUId: string;
    /**
     * 消息方向
     * * 1: 发送
     * * 2: 接收
     */
    messageDirection: MessageDirection;
    /**
     * 是否存储
     * @default true
     */
    isPersited: boolean;
    /**
     * 是否计数
     * @default true
     */
    isCounted: boolean;
    /**
     * 是否为离线消息
     */
    isOffLineMessage: boolean;
    /**
     * 是否为 @ 消息
     */
    isMentioned?: boolean;
    /**
     * 消息是否静默
     * @description 静默消息不会发送 Push 信息和本地通知提醒
     */
    disableNotification?: boolean;
    /**
     * 是否是状态消息
     */
    isStatusMessage?: boolean;
    /**
     * 是否支持消息扩展
    */
    canIncludeExpansion: boolean;
    /**
     * 消息扩展
    */
    expansion?: {
        [key: string]: any;
    } | null;
    /**
     * 消息接收状态
    */
    receivedStatus: number;
    /**
     * 消息已读回执信息，导航配置grpRRVer=1时群组类型消息内存在, 其他情况为undefined
     */
    readReceiptInfo?: IReadReceiptInfo;
    /**
     * 推送扩展
     */
    pushConfig?: IPushConfig;
    /**
     * CPP 独有字段 消息本地 ID
     */
    messageId?: number;
}
declare type GetHistoryMessageOption = {
    /**
     * 获取此时间之前的消息，0 为从当前时间拉取
     */
    timestamp?: number;
    /**
     * 获取消息的数量，范围: 1-20
     */
    count?: number;
    /**
     * 获取消息的排列顺序
     * * 0: 升序
     * * 1: 降序
     */
    order?: 0 | 1;
};
declare type GetHistoryMessageResult = {
    list: IAReceivedMessage[];
    hasMore: boolean;
};

/**
 * 初始化
 * @param initOption
 */
declare const init: (initOption: IInitOption) => void;
/**
 * 装载 plugin 插件，并返回相应的插件实例，需在调用 `connect` 方法之前使用
 * @param plugins
 */
declare function installPlugin<T, O>(plugin: IPluginGenerator<T, O>, options: O): T | null;
/**
 * 建立 IM 连接
 * @param token
 * @param reconnectKickEnable 设置断线重连时是否踢出当前正在重连的设备 (仅 Electron 环境有效)
 */
declare function connect(token: string, reconnectKickEnable?: boolean): Promise<IAsyncRes<{
    userId: string;
}>>;
/**
 * 断开当前用户的连接
 * @description 调用后将不再接收消息，不可发送消息，不可获取历史消息，不可获取会话列表
 */
declare function disconnect(): Promise<void>;
/**
 * 获取 IM 连接状态
 */
declare function getConnectionStatus(): ConnectionStatus;
/**
 * 当前服务器时间
 * 校准时间，可能存在误差
 */
declare function getServerTime(): number;
/**
  * 获取 IM 连接用户的 id
  */
declare function getCurrentUserId(): string;
/**
 * 绑定事件
 */
declare function addEventListener(eventType: string, listener: IEventListener, target?: any): void;
declare function onceEventListener(eventType: string, listener: IEventListener, target?: any): void;
/**
 * 移除事件
 */
declare function removeEventListener(eventType: string, listener: IEventListener, target?: any): void;
/**
 * 移除同一类型下的所有事件
 */
declare function removeEventListeners(eventType: string): void;
/**
 * 清理所有事件
 */
declare function clearEventListeners(): void;
declare function __addSDKVersion(name: string, version: string): void;

interface IConversationUpdateItem {
    time: number;
    val: any;
}
declare type MentionedInfo$1 = {
    /**
     * `@ 类型，其中 1 为 @ 所有人，2 为 @ 部分人`
     */
    type?: 1 | 2;
    /**
     * 被 @ 的用户 Id 列表，仅在 `type` 为 `2` 时有效
     */
    userIdList?: Array<string>;
};
interface IReceivedUpdateConversation {
    updatedItems: {
        [key: string]: IConversationUpdateItem;
    };
    conversationType: number;
    targetId: string;
    latestMessage?: IAReceivedMessage;
    unreadMessageCount?: number;
    hasMentioned?: boolean;
    mentionedInfo?: MentionedInfo$1;
    lastUnreadTime?: number;
    notificationStatus?: NotificationStatus;
    isTop?: boolean;
}
/**
 * 用户收到的会话结构
 */
interface IAReceivedConversation {
    /**
     * 会话类型
     * * 1: 单聊
     * * 3: 群聊
     * * 4: 聊天室
     * * 5: 客服会话
     * * 6: 系统消息
     * * 7: 默认关注的公众号
     * * 8: 手动关注的公众号
     * * 9: RTCLib 房间
     */
    conversationType: number;
    /**
     * 会话 id
     */
    targetId: string;
    /**
     * 会话中的最后一条消息
     */
    latestMessage: IAReceivedMessage | null;
    /**
     * 当前会话的未读消息数
     */
    unreadMessageCount?: number;
    /**
     * 是否包含 @ 自己的消息
     * @description 仅在 `conversationType` 为 `ConversationType.GROUP` 时有效
     */
    hasMentioned?: boolean;
    /**
     * 消息中的 @ 数据
     * @description 仅在 `conversationType` 为 `ConversationType.GROUP` 时有效
     */
    mentionedInfo?: MentionedInfo$1;
    /**
     * 会话中消息的最后未读时间
     */
    lastUnreadTime?: number;
    /**
     * 会话免打扰状态
     * * 1: 开启免打扰
     * * 2: 关闭免打扰
     */
    notificationStatus?: NotificationStatus;
    /**
     * 会话是否置顶
     */
    isTop?: boolean;
    /**
     * 多组织 ID
     */
    channelId?: string;
    /**
     * @ 消息未读数
     */
    unreadMentionedCount?: number;
}
interface ISendMessageOptions {
    /**
     * 是否是状态消息，一般为无需注册的自定义消息
     * @description
     * 1. 状态消息只有 pub，没有 ack 应答
     * 2. 状态消息默认不存储，不计数，`isPersited` 与 `isCounted` 配置将失效
     */
    isStatusMessage?: boolean;
    /**
     * 是否发送静默消息
     * @description
     * 当值为 `true` 时，服务器将不会发送 Push 信息，移动端也不会弹出本地通知提醒
     */
    disableNotification?: boolean;
    /**
     * Push 信息
     */
    pushContent?: string;
    /**
     * Push 通知携带的附加信息
     */
    pushData?: string;
    /**
     * 是否为 @ 消息，只当 conversationType 值为 `ConversationType.GROUP` 时有效
     */
    isMentioned?: boolean;
    /**
     * `@` 消息类型
     * @description `1: @ 所有人 2: @ 指定用户`
     * @deprecated 推荐使用 content.mentionedInfo.type
     */
    mentionedType?: 1 | 2;
    /**
     * 被 @ 的用户 Id 列表，当 `mentionedType` 值为 `1` 时，该值可为空
     * @deprecated 推荐使用 content.mentionedInfo.userIdList
     */
    mentionedUserIdList?: string[];
    /**
     * 用于发送群定向消息，只当 conversationType 值为 `ConversationType.GROUP` 时有效
     */
    directionalUserIdList?: string[];
    /**
     * 当对方为 iOS 设备且未在线时，其将收到 Voip Push. 此配置对 Android 无影响
     */
    isVoipPush?: boolean;
    /**
     * 消息是否支持拓展内容
     */
    canIncludeExpansion?: boolean;
    /**
     * 消息拓展内容数据
     */
    expansion?: {
        [key: string]: string;
    };
    /**
     * 黑/白名单
     * @todo 功能未知，需确认
     */
    isFilerWhiteBlacklist?: boolean;
    /**
     * 移动端推送配置
    */
    pushConfig?: IPushConfig;
}
interface IInsertOptions {
    /**
     * 插入消息是否计入未读数: true 计数 false 不计数, 默认不计数
     */
    isUnread?: boolean;
    /**
     * 消息搜索关键字
     */
    searchContent?: string;
}
interface IUserInfo {
    user?: {
        /**
         * 用户 ID
         */
        id?: string;
        /**
         * 用户名
         */
        name?: string;
        /**
         * 用户头像地址
         * @deprecated
         */
        portraitUri?: string;
        /**
         * user info 中附加信息
         */
        extra?: string;
        /**
         * 用户头像地址
         */
        portrait?: string;
    };
}
interface IExtraData {
    /**
     * 消息中的附加信息
     */
    extra?: string;
}
interface IMessageDesc {
    messageUId: string;
    sendTime: number;
}
/**
 * 缩略图配置
 */
interface IThumbnailConfig {
    maxHeight?: number;
    maxWidth?: number;
    quality?: number;
    scale?: number;
}

/**
 * 获取会话列表
 * @param options
 */
declare function getConversationList(options?: {
    /**
     * 会话数量
     */
    count?: number;
    /**
     * 获取起始时间
     * 默认值: 0
     * order 为 0 startTime 默认值为当前时间
     * order 为 1 startTime 默认值为所有会话中最早的消息时间
    */
    startTime?: number;
    /**
     * 默认值: 0
     * 0 获取 startTime 之前的
     * 1 获取 startTime 之后的
    */
    order?: 0 | 1;
}, channelId?: string): Promise<IAsyncRes<IAReceivedConversation[]>>;
/**
 * 移除指定的会话实例
 */
declare function removeConversation(options: IConversationOption): Promise<IAsyncRes<void>>;
/**
 * 获取会话文本草稿
 * @params conversationType 会话乐行
 * @params targetId 目标 ID
*/
declare function getTextMessageDraft(options: IConversationOption): Promise<IAsyncRes<string>>;
/**
 * 设置会话文本草稿
 * @params conversationType 会话乐行
 * @params targetId 目标 ID
 * @params draft 草稿内容
*/
declare function saveTextMessageDraft(options: IConversationOption, draft: string): Promise<IAsyncRes<void>>;
/**
 * 删除会话文本草稿
 * @params conversationType 会话乐行
 * @params targetId 目标 ID
*/
declare function clearTextMessageDraft(options: IConversationOption): Promise<IAsyncRes<void>>;
/**
 * 获取当前所有会话的消息未读数
 * @description
 * 1. 清除浏览器缓存会导致会话未读数不准确
 * 2. 会话消息未读数存储在 WebStorage 中, 若浏览器不支持或禁用 WebStorage，未读消息数将不会保存，浏览器页面刷新未读消息数将不会存在
 * 3. 其他端删除会话可能会导致会话未读数不准确
 * @param includeMuted 是否包含免打扰会话
 * @param conversationTypes 要获取未读数的会话类型，若为空，则默认获取单聊、群聊及系统消息未读数
 */
declare function getTotalUnreadCount(includeMuted?: boolean, conversationTypes?: ConversationType[]): Promise<IAsyncRes<number>>;
/**
 * 获取单个会话的未读数
 *
 */
declare function getUnreadCount(options: IConversationOption): Promise<IAsyncRes<number>>;
/**
 * 清除会话未读数
 * 原：clearUnreadCount
 */
declare function clearMessagesUnreadStatus(options: IConversationOption): Promise<IAsyncRes>;
/**
 * 清理全部未读数
 * @returns
 */
declare function clearAllMessagesUnreadStatus(): Promise<IAsyncRes<ErrorCode>>;
/**
 * 设置会话免打扰
 * 原： setConversationStatus，免打扰和置顶一体的
 * 是否免打扰
 * * 1: 开启免打扰
 * * 2: 关闭免打扰
 */
declare function setConversationNotificationStatus(options: IConversationOption, notificationStatus: NotificationStatus): Promise<IAsyncRes<void>>;
/**
 * 获取免打扰状态
 * getConversationNotificationStatus
 */
declare function getConversationNotificationStatus(options: IConversationOption): Promise<IAsyncRes<NotificationStatus | undefined>>;
/**
 * 获取免打扰状态列表
 * getBlockedConversationList
 */
declare function getBlockedConversationList(): Promise<IAsyncRes<IBaseConversationInfo[]>>;
/**
 * 设置会话是否置顶
 */
declare function setConversationToTop(options: IConversationOption, isTop?: boolean): Promise<IAsyncRes<void>>;
/**
 * 获取置顶会话
 */
declare function getTopConversationList(): Promise<IAsyncRes<IBaseConversationInfo[]>>;
/**
 * 获取单个群会话 @ 消息未读数
 * @param targetId 目标 ID
 */
declare function getUnreadMentionedCount(options: IConversationOption): Promise<IAsyncRes<number>>;
/**
 * 获取所有群会话 @ 消息未读数
 */
declare function getAllUnreadMentionedCount(): Promise<IAsyncRes<number>>;
/**
 * 获取本地全部会话的状态
 */
declare function getAllConversationState(): Promise<IAsyncRes<IConversationState[]>>;

/**
 * 获取超级群会话列表
 */
declare function getUltraGroupList(): Promise<IAsyncRes<IReceivedConversation[]>>;
/**
   * 获取超级群免打扰列表
   */
declare function getBlockUltraGroupList(): Promise<IAsyncRes<IBaseConversationInfo[]>>;
/**
 * 通知服务端正在输入中
 */
declare function sendUltraGroupTypingStatus(options: IConversationOption): Promise<IAsyncRes>;
/**
 * 根据消息 ID 获取消息
 */
declare function getUltraGroupMessageListByMessageUId(options: IConversationOption, msgs: IMessageDesc[]): Promise<IAsyncRes>;
/**
 * 修改消息扩展
 */
declare function updateExpansionForUltraGroupMessage(expansion: {
    [key: string]: any;
}, message: IAReceivedMessage): Promise<IAsyncRes>;
/**
 * 删除消息扩展
 */
declare function removeExpansionForUltraGroupMessage(expansion: string[], message: IAReceivedMessage): Promise<IAsyncRes>;
/**
 * 删除指定消息上的所有扩展
 */
declare function removeAllExpansionForUltraGroupMessage(message: IAReceivedMessage): Promise<IAsyncRes>;
/**
 * 修改消息
 */
declare function modifyMessage(content: {
    [key: string]: any;
}, message: IAReceivedMessage): Promise<IAsyncRes>;
/**
 * 获取超级群所有子频道的未读数
 */
declare function getUltraGroupUnreadMentionedCountByTargetId(targetId: string): Promise<IAsyncRes>;

/**
   * 加入聊天室
   */
declare function joinChatRoom(targetId: string, options: {
    /**
      * 拉取消息数
      */
    count: number;
}): Promise<IAsyncRes<void>>;
/**
 * 加入已存在的聊天室
 */
declare function joinExistChatRoom(targetId: string, options: {
    /**
     * 拉取消息数
     */
    count: number;
}): Promise<IAsyncRes<void>>;
/**
 * 退出聊天室
 */
declare function quitChatRoom(targetId: string): Promise<IAsyncRes<void>>;
/**
 * 获取聊天室房间数据
 * @description count 或 order 有一个为0时,只返回成员总数，不返回成员列表信息
 */
declare function getChatRoomInfo(targetId: string, options: {
    /**
     * 获取聊天室的人数，传值范围：0-20，默认为 0
     */
    count?: number;
    /**
     * 聊天室的人员排序，默认为 0
     * * 1: 升序
     * * 2: 降序
     */
    order?: 0 | 1 | 2;
}): Promise<IAsyncRes<IChatroomInfo>>;
/**
 * 设置聊天室自定义属性
 * @description 仅聊天室中不存在此属性或属性设置者为己方时可设置成功
 */
declare function setChatRoomEntry(targetId: string, options: IChatRoomEntry): Promise<IAsyncRes<void>>;
/**
 * 批量设置聊天室自定义属性
 * @param options ISetChatroomEntryOption数组
 */
declare function setChatRoomEntries(targetId: string, options: IChatRoomEntries): Promise<IAsyncRes<void>>;
/**
 * 强制 增加/修改 任意聊天室属性
 * @description 仅聊天室中不存在此属性或属性设置者为己方时可设置成功
 */
declare function forceSetChatRoomEntry(targetId: string, options: IChatRoomEntry): Promise<IAsyncRes<void>>;
/**
 * 删除聊天室属性
 * @description 仅限于删除自己设置的聊天室属性
 * @param key 属性名称, 支持英文字母、数字、+、=、-、_ 的组合方式,最大长度 128 字符
 * @param isSendNotification? 删除成功后是否发送通知消息
 * @param notificationExtra? RC:chrmKVNotiMsg 通知消息中携带的附加信息
 */
declare function removeChatRoomEntry(targetId: string, options: IRemoveChatRoomEntry): Promise<IAsyncRes<void>>;
/**
 * 批量删除聊天室属性
 * @description 仅限于删除自己设置的聊天室属性
 * @param entries[] 属性名称, 支持英文字母、数字、+、=、-、_ 的组合方式, 最大长度 128 字符
 * @param notificationExtra? RC:chrmKVNotiMsg 通知消息中携带的附加信息
 */
declare function removeChatRoomEntries(targetId: string, options: IRemoveChatRoomEntries): Promise<IAsyncRes<void>>;
/**
 * 强制删除聊天室内的任意属性
 * @description
 */
declare function forceRemoveChatRoomEntry(targetId: string, options: IRemoveChatRoomEntry): Promise<IAsyncRes<void>>;
/**
 * 获取聊天室的指定属性
 */
declare function getChatRoomEntry(targetId: string, 
/**
   * 属性名称, 支持英文字母、数字、+、=、-、_ 的组合方式, 最大长度 128 字符
   */
key: string): Promise<IAsyncRes<string | number | boolean>>;
/**
 * 获取聊天室的所有属性
 */
declare function getAllChatRoomEntries(targetId: string): Promise<IAsyncRes<{
    [key: string]: string | number | boolean;
}>>;
/**
 * 获取聊天室的历史消息
 */
declare function getChatroomHistoryMessages(targetId: string, options: GetHistoryMessageOption): Promise<IAsyncRes<GetHistoryMessageResult>>;
declare function bindRTCRoomForChatroom(option: IRTCRoomBindOption): Promise<IAsyncRes>;

declare class BaseMessage<T = any> {
    readonly messageType: string;
    readonly content: T;
    readonly isPersited: boolean;
    readonly isCounted: boolean;
    constructor(messageType: string, content: T, isPersited?: boolean, isCounted?: boolean);
}
declare type MessageConstructor<T> = new (content: T) => BaseMessage<T>;

/**
 * 群组内的消息包含的 @ 数据
 */
declare class MentionedInfo {
    type?: MentionedType | undefined;
    userIdList?: string[] | undefined;
    mentionedContent?: string | undefined;
    constructor(type?: MentionedType | undefined, userIdList?: string[] | undefined, mentionedContent?: string | undefined);
}
interface IMentionedInfo {
    /**
     * 群组消息中的 @ 信息
     */
    mentionedInfo?: MentionedInfo;
}

interface IImageMessageBody extends IExtraData, IMentionedInfo, IUserInfo {
    /**
    * 图片的略缩图
    * @description
    * 1. 必须是 base64 字符串, 图片类型为 JPG
    * 2. base64 字符串大小不可超过 80 KB
    * 3. 字符串前无媒体类型前缀
    */
    content: string;
    /**
     * 原图远程地址
     */
    imageUri: string;
}
declare const _default$a: MessageConstructor<IImageMessageBody>;

interface IHQVoiceMessageBody extends IUserInfo, IExtraData, IMentionedInfo {
    /**
     * 远程媒体资源地址
     */
    remoteUrl: string;
    /**
     * 编解码类型，默认为 aac 音频
     */
    type?: string;
    /**
     * 语音消息的时长，最大值为 60 （单位：秒）
     */
    duration: number;
}
declare const _default$9: MessageConstructor<IHQVoiceMessageBody>;

interface ISightMessageBody extends IExtraData, IMentionedInfo, IUserInfo {
    /**
     * 远程视频资源 url 地址
     */
    sightUrl: string;
    /**
     * 小视频首帧的缩略图进行 Base64 编码的结果值，格式为 JPG
     * @description 注意在 Base64 进行 Encode 后需要将所有 \r\n 和 \r 和 \n 替换成空
     */
    content: string;
    /**
     * 视频时长，单位：秒
     */
    duration: number;
    /**
     * 视频尺寸，单位：Byte
     */
    size: number;
    /**
     * 视频文件名称
     */
    name: string;
}
declare const _default$8: MessageConstructor<ISightMessageBody>;

/**
 * 文本消息
 */
interface ITextMessageBody extends IUserInfo, IExtraData, IMentionedInfo {
    /**
     * 文本消息内容
     */
    content: string;
}
declare const _default$7: MessageConstructor<ITextMessageBody>;

interface ICombineMessageBody extends IExtraData, IUserInfo {
    /**
     * 存储在融云服务器的远端 HTML 文件路径
     */
    remoteUrl: string;
    /**
     * 在会话界面显示的合并转发消息中，前 4 条消息的用户名称
    */
    nameList: string[];
    /**
     * 在会话界面显示的合并转发消息中，前 4 条消息的简略信息，与 nameList 属 性相对应
    */
    summaryList: string[];
    /**
     * 会话类型，目前合并转发功能支持二人会话及群聊会话，二人会话是 1 、群组会话是 3
    */
    conversationType: ConversationType;
}
declare const _default$6: MessageConstructor<ICombineMessageBody>;

interface IFileMessageBody extends IExtraData, IUserInfo {
    /**
     * 文件名称
     */
    name: string;
    /**
     * 文件尺寸，单位: Byte
     */
    size: number;
    /**
     * 文件类型
     */
    type: string;
    /**
     * 远程文件资源地址
     */
    fileUrl: string;
}
declare const _default$5: MessageConstructor<IFileMessageBody>;

interface IGIFMessageBody extends IExtraData, IUserInfo {
    /**
     * GIF 图片文件大小，单位为 KB
     */
    gifDataSize: number;
    /**
     * GIF 图片资源 url 地址
     */
    remoteUrl: string;
    /**
     * 图片宽度
     */
    width: number;
    /**
     * 图片高度
     */
    height: number;
}
declare const _default$4: MessageConstructor<IGIFMessageBody>;

interface IVoiceMessageBody extends IExtraData, IMentionedInfo, IUserInfo {
    content: string;
    duration: number;
    extra: string;
}
declare const _default$3: MessageConstructor<IVoiceMessageBody>;

interface ILocationMessageBody extends IExtraData, IMentionedInfo, IUserInfo {
    /**
     * 经度
     */
    longitude: number;
    /**
     * 维度
     */
    latitude: number;
    /**
     * 位置信息
     */
    poi: string;
    /**
     * 位置缩略图，图片需要是不带前缀的 base64 字符串
     */
    content: string;
}
declare const _default$2: MessageConstructor<ILocationMessageBody>;

interface IReferenceMessageBody extends IExtraData, IMentionedInfo, IUserInfo {
    /**
     * 被引用消息的发送用户 Id
     */
    referMsgUserId: String;
    /**
     * 引用消息对象
     */
    referMsg: any;
    /**
     * 输入的文本消息内容
     */
    content: string;
    /**
     * 发送的引用消息类型
     */
    objName: string;
}
declare const _default$1: MessageConstructor<IReferenceMessageBody>;

interface IArticle {
    title: string;
    content: string;
    imageUri: string;
    url: string;
}
interface IRichContentMessageBody extends IArticle, IExtraData, IMentionedInfo, IUserInfo {
}
declare const _default: MessageConstructor<IRichContentMessageBody>;

/**
* 发送消息
* @param options
*/
declare function sendMessage(conversation: IConversationOption, message: BaseMessage, options?: ISendMessageOptions): Promise<IAsyncRes<IAReceivedMessage>>;
declare function sendTextMessage(conversation: IConversationOption, messageBody: ITextMessageBody, options?: ISendMessageOptions): Promise<IAsyncRes<IAReceivedMessage>>;
declare type ISendBody = IUserInfo & IExtraData & {
    file: Blob;
};
declare type ISendFileMessageOptions = ISendBody;
/**
 * 发送文件消息
 */
declare const sendFileMessage: (conversation: IConversationOption, msgBody: ISendBody, hooks?: {
    /**
     * 文件上传进度回调
     */
    onProgress?: ((progress: number) => void) | undefined;
    /**
     * 文件上传完成回调，可通过修改返回值以修改待发布的消息内容，如实现自定义消息
     */
    onComplete?: ((fileInfo: {
        url: string;
    }) => (void | BaseMessage)) | undefined;
} | undefined, sendOptions?: ISendMessageOptions | undefined) => Promise<IAsyncRes<IAReceivedMessage>>;
declare type ISendImageMessageOptions = ISendBody;
/**
 * 发送图片消息
 */
declare const sendImageMessage: (conversation: IConversationOption, msgBody: ISendBody, hooks?: {
    /**
     * 文件上传进度回调
     */
    onProgress?: ((progress: number) => void) | undefined;
    /**
     * 文件上传完成回调，可通过修改返回值以修改待发布的消息内容，如实现自定义消息
     */
    onComplete?: ((fileInfo: {
        url: string;
    }) => (void | BaseMessage)) | undefined;
} | undefined, sendOptions?: ({
    thumbnailConfig?: IThumbnailConfig | undefined;
} & ISendMessageOptions) | undefined) => Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 发送高清语音消息，待发送的文件必须为 AAC 音频文件
 */
declare const sendHQVoiceMessage: (conversation: IConversationOption, msgBody: ISendBody, hooks?: {
    /**
     * 文件上传进度回调
     */
    onProgress?: ((progress: number) => void) | undefined;
    /**
     * 文件上传完成回调，可通过修改返回值以修改待发布的消息内容，如实现自定义消息
     */
    onComplete?: ((fileInfo: {
        url: string;
    }) => (void | BaseMessage)) | undefined;
} | undefined, sendOptions?: ISendMessageOptions | undefined) => Promise<IAsyncRes<IAReceivedMessage>>;
declare type ISendSightMessageOptions = {
    duration: number;
    thumbnail: string;
    name?: string;
} & ISendBody;
/**
 * 发送小视频消息
 * @description 发送的小视频消息必须是 MP4 文件，且音频编码为 AAC，视频编码 H264，否则可能造成 iOS 或 Android 接收后不可播放问题
 */
declare const sendSightMessage: (conversation: IConversationOption, msgBody: ISendSightMessageOptions, hooks?: {
    /**
     * 文件上传进度回调
     */
    onProgress?: ((progress: number) => void) | undefined;
    /**
     * 文件上传完成回调，可通过修改返回值以修改待发布的消息内容，如实现自定义消息
     */
    onComplete?: ((fileInfo: {
        url: string;
    }) => (void | BaseMessage)) | undefined;
} | undefined, sendOptions?: ISendMessageOptions | undefined) => Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 获取历史消息
 */
declare function getHistoryMessages(conversation: IConversationOption, options?: GetHistoryMessageOption): Promise<IAsyncRes<GetHistoryMessageResult>>;
/**
 * 获取远程历史消息
 */
declare function getRemoteHistoryMessages(conversation: IConversationOption, options?: GetHistoryMessageOption): Promise<IAsyncRes<GetHistoryMessageResult>>;
/**
 * 发送单聊已读回执
 */
declare function sendReadReceiptMessage(targetId: string, messageUId: string, timestamp: number, channelId?: string): Promise<IAsyncRes<void>>;
/**
 * 发送群已读回执请求
 * @param messageUIds 消息UID列表
 */
declare function sendReadReceiptRequest(targetId: string, messageUId: string, channelId?: string): Promise<IAsyncRes<void>>;
/**
 * @deprecated 已废弃，请使用 sendReadReceiptResponseV2
 */
declare function sendReadReceiptResponse(targetId: string, messageUIds: string[], channelId?: string): Promise<IAsyncRes<void>>;
/**
 * 发送群阅读回执响应V2
 *  @param targetId 群组Id
 *  @param messageList 要回执的消息列表，结构为： {senderUserId: [messageUId1, messageUId2]}
 *  @param channelId
 */
declare function sendReadReceiptResponseV2(targetId: string, messageList: {
    [senderUserId: string]: string[];
}, channelId?: string): Promise<IAsyncRes<void>>;
/**
 * 多端同步阅读状态
 * @param conversation
 * @param timestamp
 */
declare function sendSyncReadStatusMessage(conversation: IConversationOption, lastMessageSendTime: number): Promise<{
    code: ErrorCode;
    msg?: undefined;
} | {
    code: never;
    msg: string | undefined;
}>;
/**
 * 撤回消息
 * @param options
 */
declare function recallMessage(conversation: IConversationOption, options: {
    /**
     * 消息的唯一id，客户端依赖此属性查找要撤回的消息
     */
    messageUId: string;
    /**
     * 消息发送时间，服务端依赖此属性查找要撤回的消息
     */
    sentTime: number;
    /**
     * 撤回消息携带用户信息
    */
    user?: IUserProfile;
    /**
      * 是否发送静默消息
      * @description
      * 当值为 `true` 时，服务器将不会发送 Push 信息，移动端也不会弹出本地通知提醒
    */
    disableNotification?: boolean;
    /**
     * 移动端推送配置
    */
    pushConfig?: IPushConfig;
}): Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 按消息 id 删除消息
 */
declare function deleteMessages(conversation: IConversationOption, messages: {
    /**
     * 消息 id
     */
    messageUId: string;
    /**
     * 消息发送时间
     */
    sentTime: number;
    /**
     * 消息方向
     * * 1: 发送
     * * 2: 接收
     */
    messageDirection: MessageDirection;
}[]): Promise<IAsyncRes<void>>;
/**
 * 按时间戳删除消息
 * @param conversation 会话
 * @param timestamp 清除时间点, 该时间之前的消息将被清除
 */
declare function clearHistoryMessages(conversation: IConversationOption, timestamp: number): Promise<IAsyncRes<void>>;
/**
 * 更新（添加、替换）消息扩展属性
 * @param expansion 要更新的消息扩展信息键值对
 * @param message 要更新的原始消息体
*/
declare function updateMessageExpansion(expansion: {
    [key: string]: any;
}, message: IAReceivedMessage): Promise<IAsyncRes<void>>;
/**
 * 删除扩展存储
 * @params keys 需删除消息扩展的 keys
 * @params message 原始消息体
*/
declare function removeMessageExpansionForKey(keys: string[], message: IAReceivedMessage): Promise<IAsyncRes<void>>;
/**
 * 发送typing消息
 * @param typingContentType 输入状态消息类型
 * @returns
 */
declare function sendTypingStatusMessage(conversation: IConversationOption, typingContentType: string): Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 获取群已读列表
 * @param messageUId 消息UID
 * @returns
 */
declare function getMessageReader(targetId: string, messageUId: string, channelId: string): Promise<IAsyncRes<IMessageReaderResponse>>;
/**
   * 注册自定义消息
   * @param messageType 消息类型
   * @param isPersited  是否存储
   * @param isCounted   是否计数
   * @param prototypes  消息属性名称
  */
declare function registerMessageType<T>(messageType: string, isPersited: boolean, isCounted: boolean, prototypes?: string[], isStatusMessage?: boolean): new (content: T) => BaseMessage<T>;
/**
 * 获取第一条未读消息
 * @param conversation
 */
declare function getFirstUnreadMessage(conversation: IConversationOption): Promise<IAsyncRes<IReceivedMessage | null>>;
/**
   * 向本地插入一条消息，不发送到服务器
   * @param conversationType 会话类型
   * @param targetId 目标 ID
   * @param content 消息体
   * @param callback
  */
declare function insertMessage(conversation: IConversationOption, content: IReceivedMessage, options?: IInsertOptions): Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 获取消息
 * @param messageId 本地消息 ID 或 messageUId
*/
declare function getMessage(messageId: number): Promise<IAsyncRes<IAReceivedMessage>>;
/**
 * 获取会话下所有未读的 @ 消息
 * @param conversationType 会话类型
 * @param targetId 目标 ID
 */
declare function getUnreadMentionedMessages(conversation: IConversationOption): IAsyncRes<IAReceivedMessage[]>;
/**
 * 按关键字搜索会话内的消息
 * @param conversation 会话
 * @param keyword 搜索内容
 * @param timestamp 搜索时间, 搜索该时间之前的消息
 * @param count 获取的数量
*/
declare function searchMessages(conversation: IConversationOption, keyword: string, timestamp: number, count: number): Promise<IAsyncRes<{
    messages: IAReceivedMessage[];
    count: number | undefined;
}>>;
/**
 * 从本地消息数据库中删除某一会话指定时间之前的消息数据
 * @param conversation 会话
 * @param timestamp 指定删除该时间戳之前的消息
 * @param cleanSpace 指定删除该时间戳之前的消息。是否清理数据条目所使用的磁盘空间。清理磁盘空间会阻塞进程且耗时较长，不推荐使用。
 * 数据在被抹除的情况下，未清理的磁盘空间会在后续存储操作中复用，且对数据查询无影响
*/
declare function deleteLocalMessagesByTimestamp(conversation: IConversationOption, timestamp: number, cleanSpace: boolean): Promise<IAsyncRes<void>>;
/**
 * 清空会话下历史消息
 * @param conversationType 会话类型
 * @param targetId 目标 ID
 * @param callback
*/
declare function clearMessages(conversation: IConversationOption): Promise<IAsyncRes<void>>;
/**
 * 按内容搜索会话
 * @param keyword 关键字
 * @param conversationTypes 会话类型数组
*/
declare function searchConversationByContent(keyword: string, conversationTypes?: ConversationType[], customMessageType?: string[], channelId?: string): Promise<IAsyncRes<IReceivedConversation[] | undefined>>;
/**
 * 清除时间戳前的未读数
 * @param conversationType 会话类型
 * @param targetId 目标 ID
 * @param timestamp 目标 ID
 * @param callback
*/
declare function clearUnreadCountByTimestamp(conversation: IConversationOption, timestamp: number): Promise<IAsyncRes<void>>;
/**
 * 设置消息接收状态
 */
declare function setMessageReceivedStatus(messageId: number, receivedStatus: number): Promise<IAsyncRes<void>>;

/**
 * 创建标签
 * @param tag 标签信息
 */
declare function addTag(tag: ITagParam): Promise<IAsyncRes<void>>;
/**
 * 删除标签
 * @param tagId 标签 ID
 */
declare function removeTag(tagId: string): Promise<IAsyncRes<void>>;
/**
 * 编辑标签
 * @param tag 标签信息
*/
declare function updateTag(tag: ITagParam): Promise<IAsyncRes<void>>;
/**
 * 获取标签列表
 */
declare function getTags(): Promise<IAsyncRes<ITagInfo[] | undefined>>;
/**
* 获取会话下的标签
* @param conversation 会话信息
*/
declare function getTagsFromConversation(conversation: IConversationOption): Promise<IAsyncRes<IConversationTag[] | undefined>>;
/**
 * 添加会话到指定标签
 * @param tagId 标签 ID
 * @param conversations 要添加的会话列表
 */
declare function addConversationsToTag(tagId: string, conversations: IConversationOption[]): Promise<IAsyncRes<void>>;
/**
 * 删除指定标签中会话
 * @param tagId 标签 ID
 * @param conversations 要删除的会话列表
 */
declare function removeConversationsFromTag(tagId: string, conversations: IConversationOption[]): Promise<IAsyncRes<void>>;
/**
 * 从指定会话中删除多个标签
 * @param conversation 会话
 * @param tagIds 要删除的标签列表
 */
declare function removeTagsFromConversation(conversation: IConversationOption, tagIds: string[]): Promise<IAsyncRes<void>>;
/**
 * 从多个会话中删除指定的标签
 * @param tagId 标签 ID
 * @param conversations 要删除的会话列表
 */
declare function removeTagFromConversations(tagId: string, conversations: IConversationOption[]): Promise<IAsyncRes<void>>;
/**
 * 分页获取标签下会话列表
 * @param tagId 标签id
 * @param count 获取数量
 * @param timestamp 会话时间戳
 */
declare function getConversationsFromTagByPage(tagId: string, count: number, startTime: number): Promise<IAsyncRes<IReceivedConversationByTag[] | undefined>>;
/**
 * 根据标签获取未读消息数
 * @param tagId 标签id
 * @param containMuted 是否包含免打扰
 */
declare function getUnreadCountByTag(tagId: string, containMuted: boolean): Promise<IAsyncRes<number | undefined>>;
/**
 * 设置标签中会话置顶
 * @param tagId 标签id
 * @param conversation 会话
 * @param status 状态
 */
declare function setConversationToTopInTag(tagId: string, conversation: IConversationOption, isTop: boolean): Promise<IAsyncRes<void>>;

declare enum Events {
    CONNECTING = "CONNECTING",
    CONNECTED = "CONNECTED",
    DISCONNECT = "DISCONNECT",
    SUSPEND = "SUSPEND",
    MESSAGES = "MESSAGES",
    READ_RECEIPT_RECEIVED = "READ_RECEIPT_RECEIVED",
    MESSAGE_RECEIPT_REQUEST = "MESSAGE_RECEIPT_REQUEST",
    MESSAGE_RECEIPT_RESPONSE = "MESSAGE_RECEIPT_RESPONSE",
    CONVERSATION = "CONVERSATION",
    CHATROOM = "CHATROOM",
    EXPANSION = "EXPANSION",
    PULL_OFFLINE_MESSAGE_FINISHED = "PULL_OFFLINE_MESSAGE_FINISHED",
    TAG = "TAG",
    CONVERSATION_TAG = "CONVERSATION_TAG",
    TYPING_STATUS = "TYPING_STATUS",
    MESSAGE_BLOCKED = "MESSAGE_BLOCKED",
    ULTRA_GROUP_ENABLE = "ULTRA_GROUP_ENABLE",
    OPERATE_STATUS = "OPERATE_STATUS",
    ULTRA_GROUP_MESSAGE_EXPANSION_UPDATED = "ULTRA_GROUP_MESSAGE_EXPANSION_UPDATED",
    ULTRA_GROUP_MESSAGE_MODIFIED = "ULTRA_GROUP_MESSAGE_MODIFIED",
    ULTRA_GROUP_MESSAGE_RECALLED = "ULTRA_GROUP_MESSAGE_RECALLED"
}

/**
 * 获取文件 token
 * @description 上传文件时，获取文件 token
 * @param fileType 上传类型, 通过 RongIMLib.FILE_TYPE 获取
 * @param fileName 上传文件名，Server 通过文件名生成百度上传认证, 若不传 engine 自动生成
 * @param httpMethod STC 分段上传时的必填参数，有效值为 PUT | POST
 * @param queryString STC 分段上传时的查询字符串
 * `httpMethod` 与 `queryString` 为 STC S3 分段上传时的专属参数，STC 分段上传包含三个过程：
 * 1. 开始分段前调用，此时 `httpMethod` 值应为 `POST`， `queryString` 值为 `uploads`，filename为空
 * 2. 上传请求前调用，此时 `httpMethod` 值应为 `PUT`，`queryString` 值为 `partNumber={partamNumer}&uploadId={uploadId}`，filename为第一个步骤生成的filename
 * 3. 上传结束前调用，此时 `httpMethod` 值应为 `POST`，`queryString` 值为 `uploadId={uploadId}`，filename为第一个步骤生成的filename
 */
declare function getFileToken(fileType: FileType, fileName?: string, httpMethod?: 'POST' | 'PUT', queryString?: string): Promise<IAsyncRes<IUploadAuth & {
    bos: string;
    qiniu: string;
}>>;
/**
 * 获取文件的下载地址
 * @param fileType 文件类型
 * @param fileName 文件名
 * @param saveName 下载后的存储文件名
 * @param uploadRes 上传成功返回的数据，百度 bos 上传地址即为下载地址，IM Server 不会返回百度 bos 下载地址，通过用户层传入再返回
 * @param serverType 使用的存储服务标识
 * @returns
 */
declare function getFileUrl(fileType: FileType, filename?: string, saveName?: string, uploadRes?: {
    isBosRes: boolean;
    downloadUrl: string;
}, serverType?: UploadMethod): Promise<IAsyncRes<{
    downloadUrl: string;
}>>;

/**
 * 业务层枚举, 此处枚举会暴露给开发者
*/
declare const ConnectType: {
    COMET: string;
    WEBSOCKET: string;
};
declare const MessageType: {
    TEXT: string;
    VOICE: string;
    HQ_VOICE: string;
    IMAGE: string;
    GIF: string;
    RICH_CONTENT: string;
    LOCATION: string;
    FILE: string;
    SIGHT: string;
    COMBINE: string;
    CHRM_KV_NOTIFY: string;
    LOG_COMMAND: string;
    EXPANSION_NOTIFY: string;
    REFERENCE: string;
    RECALL_MESSAGE_TYPE: string;
};

export { BaseMessage, _default$6 as CombineMessage, ConnectType, Events, _default$5 as FileMessage, _default$4 as GIFMessage, GetHistoryMessageOption, GetHistoryMessageResult, _default$9 as HQVoiceMessage, IAReceivedConversation, IAReceivedMessage, ICombineMessageBody, IConversationUpdateItem, IFileMessageBody, IGIFMessageBody, IHQVoiceMessageBody, IImageMessageBody, IInitOption, ILocationMessageBody, IReceivedUpdateConversation, IReferenceMessageBody, IRichContentMessageBody, ISendFileMessageOptions, ISendImageMessageOptions, ISendMessageOptions, ISightMessageBody, ITextMessageBody, IVoiceMessageBody, _default$a as ImageMessage, _default$2 as LocationMessage, MentionedInfo$1 as MentionedInfo, MessageConstructor, MessageType, _default$1 as ReferenceMessage, _default as RichContentMessage, _default$8 as SightMessage, _default$7 as TextMessage, _default$3 as VoiceMessage, __addSDKVersion, addConversationsToTag, addEventListener, addTag, bindRTCRoomForChatroom, clearAllMessagesUnreadStatus, clearEventListeners, clearHistoryMessages, clearMessages, clearMessagesUnreadStatus, clearTextMessageDraft, clearUnreadCountByTimestamp, connect, deleteLocalMessagesByTimestamp, deleteMessages, disconnect, forceRemoveChatRoomEntry, forceSetChatRoomEntry, getAllChatRoomEntries, getAllConversationState, getAllUnreadMentionedCount, getBlockUltraGroupList, getBlockedConversationList, getChatRoomEntry, getChatRoomInfo, getChatroomHistoryMessages, getConnectionStatus, getConversationList, getConversationNotificationStatus, getConversationsFromTagByPage, getCurrentUserId, getFileToken, getFileUrl, getFirstUnreadMessage, getHistoryMessages, getMessage, getMessageReader, getRemoteHistoryMessages, getServerTime, getTags, getTagsFromConversation, getTextMessageDraft, getTopConversationList, getTotalUnreadCount, getUltraGroupList, getUltraGroupMessageListByMessageUId, getUltraGroupUnreadMentionedCountByTargetId, getUnreadCount, getUnreadCountByTag, getUnreadMentionedCount, getUnreadMentionedMessages, init, insertMessage, installPlugin, joinChatRoom, joinExistChatRoom, modifyMessage, onceEventListener, quitChatRoom, recallMessage, registerMessageType, removeAllExpansionForUltraGroupMessage, removeChatRoomEntries, removeChatRoomEntry, removeConversation, removeConversationsFromTag, removeEventListener, removeEventListeners, removeExpansionForUltraGroupMessage, removeMessageExpansionForKey, removeTag, removeTagFromConversations, removeTagsFromConversation, saveTextMessageDraft, searchConversationByContent, searchMessages, sendFileMessage, sendHQVoiceMessage, sendImageMessage, sendMessage, sendReadReceiptMessage, sendReadReceiptRequest, sendReadReceiptResponse, sendReadReceiptResponseV2, sendSightMessage, sendSyncReadStatusMessage, sendTextMessage, sendTypingStatusMessage, sendUltraGroupTypingStatus, setChatRoomEntries, setChatRoomEntry, setConversationNotificationStatus, setConversationToTop, setConversationToTopInTag, setMessageReceivedStatus, updateExpansionForUltraGroupMessage, updateMessageExpansion, updateTag };
